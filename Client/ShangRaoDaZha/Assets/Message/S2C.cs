// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: S2C.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace S2CEntity {

  /// <summary>Holder for reflection information generated from S2C.proto</summary>
  public static partial class S2CReflection {

    #region Descriptor
    /// <summary>File descriptor for S2C.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static S2CReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglTMkMucHJvdG8SCVMyQ0VudGl0eRoJQzJTLnByb3RvIm4KE1BsYXllck91",
            "dENhcmRGYWlsZWQSFAoMcm9vbV9jb2RlX2lkGAEgASgNEisKC29wZXJhdGVD",
            "YXJkGAIgAygLMhYuQzJTRW50aXR5Lk9wZXJhdGVDYXJkEhQKDGNhbl9vdXRf",
            "Y2FyZBgDIAEoCCJ7ChZCcm9hZGNhc3RQbGF5ZXJPcGVyYXRlEhQKDHJvb21f",
            "Y29kZV9pZBgBIAEoDRIQCghwb3NpdGlvbhgCIAEoDRIMCgR0eXBlGAMgASgN",
            "EisKC29wZXJhdGVDYXJkGAQgAygLMhYuQzJTRW50aXR5Lk9wZXJhdGVDYXJk",
            "IvEDCg1TaXRQbGF5ZXJJbmZvEhAKCHBvc2l0aW9uGAEgASgNEhEKCXBvc2l0",
            "aW9ueBgCIAEoAhIRCglwb3NpdGlvbnkYAyABKAISDAoEZ3VpZBgEIAEoBBIL",
            "CgNzZXgYBSABKA0SGQoRaXNfcmVhZHlfZm9yX3Jvb20YBiABKAgSHgoWaXNf",
            "cmVhZHlfZm9yX25leHRfZ2FtZRgHIAEoCBIQCghvbl9mb3JjZRgIIAEoCBIR",
            "CgljbGllbnRfaXAYCSABKAkSEwoLY2xpZW50X21hc2sYCiABKAkSEgoKb3Ro",
            "ZXJfbmFtZRgLIAEoCRIPCgdoZWFkX2lwGAwgASgJEhQKDGNoYW5nZV9zY29y",
            "ZRgNIAEoBRIXCg90YW9fc2hhbmdfc2NvcmUYDiABKAUSDQoFc2NvcmUYDyAB",
            "KAUSFwoPdG90YWxfd2luX2NvdW50GBAgASgNEhoKEnRvdGFsX3podWFuZ19j",
            "b3VudBgRIAEoDRIZChFsYXN0X29wZXJhdGVfdHlwZRgSIAEoDRISCgpjYXJk",
            "X2NvdW50GBMgASgFEhIKCmhvbGRfY2FyZHMYFCADKA0SEgoKZHJvcF9jYXJk",
            "cxgVIAMoDRIPCgdhZGRyZXNzGBYgASgJEhgKEHRvdGFsX3BsYXlfY291bnQY",
            "FyABKA0iOwoKRmluaXNoSW5mbxIXCg9maW5pc2hfcG9zaXRpb24YASABKA0S",
            "FAoMZmluaXNoX29yZGVyGAIgASgNIqwCCg5QbGF5U3RhdHVzSW5mbxIXCg9m",
            "cmllbmRfcG9zaXRpb24YASABKA0SHwoXbGFzdF9kcm9wX2NhcmRfcG9zaXRp",
            "b24YAiABKA0SGgoSd2FpdF9kcm9wX3Bvc2l0aW9uGAMgASgNEhUKDWhhc19k",
            "cm9wX2NhcmQYBCABKAgSEgoKZHJvcF9jYXJkcxgFIAMoDRIUCgxmaW5pc2hf",
            "Y291bnQYBiABKAUSKgoLZmluaXNoX2luZm8YByADKAsyFS5TMkNFbnRpdHku",
            "RmluaXNoSW5mbxIYChBiYW9fcGFpX3Bvc2l0aW9uGAggASgNEhwKFGFza19i",
            "YW9fcGFpX3Bvc2l0aW9uGAkgASgNEh8KF2Fub3RoZXJfZnJpZW5kX3Bvc2l0",
            "aW9uGAogASgNIhsKC0NhdGNoZWRDYXJkEgwKBGNhcmQYASADKA0i3gEKEkdh",
            "bWVPdmVyUGxheWVySW5mbxIRCglpc193aW5uZXIYASABKAgSEAoIcG9zaXRp",
            "b24YAiABKA0SDQoFc2NvcmUYAyABKAUSFAoMY2hhbmdlX3Njb3JlGAQgASgF",
            "EhIKCmJhc2Vfc2NvcmUYBSABKAUSFgoOemhhbl9kYW5fc2NvcmUYBiABKAUS",
            "FQoNZmFfd2FuZ19zY29yZRgHIAEoBRINCgVjYXJkcxgIIAMoDRIsCgxjYXRj",
            "aGVkX2NhcmQYCSADKAsyFi5TMkNFbnRpdHkuQ2F0Y2hlZENhcmQi0wEKDEdh",
            "bWVPdmVySW5mbxIXCg96aHVhbmdfcG9zaXRpb24YASABKA0SFwoPZnJpZW5k",
            "X3Bvc2l0aW9uGAIgASgNEjwKFWdhbWVfb3Zlcl9wbGF5ZXJfaW5mbxgDIAMo",
            "CzIdLlMyQ0VudGl0eS5HYW1lT3ZlclBsYXllckluZm8SKgoLZmluaXNoX2lu",
            "Zm8YBCADKAsyFS5TMkNFbnRpdHkuRmluaXNoSW5mbxIYChBiYW9fcGFpX3Bv",
            "c2l0aW9uGAUgASgNEg0KBWlzX3RwGAYgASgIIrAECgxTZW5kUm9vbUluZm8S",
            "FAoMcm9vbV9jb2RlX2lkGAEgASgNEhQKDGNyZWF0b3JfZ3VpZBgCIAEoBBIS",
            "CgpnYW1lX2NvdW50GAMgASgNEhgKEGNyZWF0ZV9yb29tX3R5cGUYBCABKA0S",
            "FwoPemh1YW5nX3Bvc2l0aW9uGAUgASgNEhQKDHpodWFuZ19jb3VudBgGIAEo",
            "DRITCgtyb29tX3N0YXR1cxgHIAEoDRIWCg5jdXJfZ2FtZV9jb3VudBgIIAEo",
            "DRIaChJxdWVyeV9kaXNwb3NlX3Jvb20YCSABKAgSEgoKdGltZXJfcmVzdBgK",
            "IAEoDRIXCg9hZ3Jlc3NfcG9zaXRpb24YCyADKA0SMQoPc2l0X3BsYXllcl9p",
            "bmZvGAwgAygLMhguUzJDRW50aXR5LlNpdFBsYXllckluZm8SMwoQcGxheV9z",
            "dGF0dXNfaW5mbxgNIAEoCzIZLlMyQ0VudGl0eS5QbGF5U3RhdHVzSW5mbxIv",
            "Cg5nYW1lX292ZXJfaW5mbxgOIAEoCzIXLlMyQ0VudGl0eS5HYW1lT3Zlcklu",
            "Zm8SFAoMcGxheWVyX2NvdW50GA8gASgNEhIKCnBsYXlfY291bnQYECABKA0S",
            "EQoJcGxheV90eXBlGBEgASgNEhAKCGppYW5nX21hGBIgAygNEhIKCmZhX3dh",
            "bmdfdHAYEyABKAgSEQoJd3VfemhhX3RwGBQgASgIEhIKCmlzX2JhX3dhbmcY",
            "FSABKAgipgEKD1BsYXllclNjb3JlSW5mbxIMCgRndWlkGAEgASgEEhEKCW90",
            "aGVyTmFtZRgCIAEoCRIOCgZoZWFkSWQYAyABKAkSFAoMY2hhbmdlX3Njb3Jl",
            "GAQgASgFEhIKCmJhc2Vfc2NvcmUYBSABKAUSEgoKYm9tYl9zY29yZRgGIAEo",
            "BRIVCg1mYV93YW5nX3Njb3JlGAcgASgFEg0KBXNjb3JlGAggASgFIkMKCkdh",
            "bWVSZWNvcmQSNQoRcGxheWVyX3NvY3JlX2luZm8YASADKAsyGi5TMkNFbnRp",
            "dHkuUGxheWVyU2NvcmVJbmZvIooCCghHYW1lT3ZlchIUCgxyb29tX2NvZGVf",
            "aWQYASABKA0SFwoPemh1YW5nX3Bvc2l0aW9uGAIgASgNEhcKD2ZyaWVuZF9w",
            "b3NpdGlvbhgDIAEoDRI1Cg5nYW1lX292ZXJfaW5mbxgEIAMoCzIdLlMyQ0Vu",
            "dGl0eS5HYW1lT3ZlclBsYXllckluZm8SKgoLZmluaXNoX2luZm8YBSADKAsy",
            "FS5TMkNFbnRpdHkuRmluaXNoSW5mbxIYChBiYW9fcGFpX3Bvc2l0aW9uGAYg",
            "ASgNEg0KBWlzX3RwGAcgASgIEioKC2dhbWVfcmVjb3JkGAggAygLMhUuUzJD",
            "RW50aXR5LkdhbWVSZWNvcmRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::C2SEntity.C2SReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::S2CEntity.PlayerOutCardFailed), global::S2CEntity.PlayerOutCardFailed.Parser, new[]{ "RoomCodeId", "OperateCard", "CanOutCard" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2CEntity.BroadcastPlayerOperate), global::S2CEntity.BroadcastPlayerOperate.Parser, new[]{ "RoomCodeId", "Position", "Type", "OperateCard" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2CEntity.SitPlayerInfo), global::S2CEntity.SitPlayerInfo.Parser, new[]{ "Position", "Positionx", "Positiony", "Guid", "Sex", "IsReadyForRoom", "IsReadyForNextGame", "OnForce", "ClientIp", "ClientMask", "OtherName", "HeadIp", "ChangeScore", "TaoShangScore", "Score", "TotalWinCount", "TotalZhuangCount", "LastOperateType", "CardCount", "HoldCards", "DropCards", "Address", "TotalPlayCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2CEntity.FinishInfo), global::S2CEntity.FinishInfo.Parser, new[]{ "FinishPosition", "FinishOrder" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2CEntity.PlayStatusInfo), global::S2CEntity.PlayStatusInfo.Parser, new[]{ "FriendPosition", "LastDropCardPosition", "WaitDropPosition", "HasDropCard", "DropCards", "FinishCount", "FinishInfo", "BaoPaiPosition", "AskBaoPaiPosition", "AnotherFriendPosition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2CEntity.CatchedCard), global::S2CEntity.CatchedCard.Parser, new[]{ "Card" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2CEntity.GameOverPlayerInfo), global::S2CEntity.GameOverPlayerInfo.Parser, new[]{ "IsWinner", "Position", "Score", "ChangeScore", "BaseScore", "ZhanDanScore", "FaWangScore", "Cards", "CatchedCard" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2CEntity.GameOverInfo), global::S2CEntity.GameOverInfo.Parser, new[]{ "ZhuangPosition", "FriendPosition", "GameOverPlayerInfo", "FinishInfo", "BaoPaiPosition", "IsTp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2CEntity.SendRoomInfo), global::S2CEntity.SendRoomInfo.Parser, new[]{ "RoomCodeId", "CreatorGuid", "GameCount", "CreateRoomType", "ZhuangPosition", "ZhuangCount", "RoomStatus", "CurGameCount", "QueryDisposeRoom", "TimerRest", "AgressPosition", "SitPlayerInfo", "PlayStatusInfo", "GameOverInfo", "PlayerCount", "PlayCount", "PlayType", "JiangMa", "FaWangTp", "WuZhaTp", "IsBaWang" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2CEntity.PlayerScoreInfo), global::S2CEntity.PlayerScoreInfo.Parser, new[]{ "Guid", "OtherName", "HeadId", "ChangeScore", "BaseScore", "BombScore", "FaWangScore", "Score" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2CEntity.GameRecord), global::S2CEntity.GameRecord.Parser, new[]{ "PlayerSocreInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2CEntity.GameOver), global::S2CEntity.GameOver.Parser, new[]{ "RoomCodeId", "ZhuangPosition", "FriendPosition", "GameOverInfo", "FinishInfo", "BaoPaiPosition", "IsTp", "GameRecord" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlayerOutCardFailed : pb::IMessage<PlayerOutCardFailed> {
    private static readonly pb::MessageParser<PlayerOutCardFailed> _parser = new pb::MessageParser<PlayerOutCardFailed>(() => new PlayerOutCardFailed());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerOutCardFailed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2CEntity.S2CReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOutCardFailed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOutCardFailed(PlayerOutCardFailed other) : this() {
      roomCodeId_ = other.roomCodeId_;
      operateCard_ = other.operateCard_.Clone();
      canOutCard_ = other.canOutCard_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOutCardFailed Clone() {
      return new PlayerOutCardFailed(this);
    }

    /// <summary>Field number for the "room_code_id" field.</summary>
    public const int RoomCodeIdFieldNumber = 1;
    private uint roomCodeId_;
    /// <summary>
    /// 房间号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomCodeId {
      get { return roomCodeId_; }
      set {
        roomCodeId_ = value;
      }
    }

    /// <summary>Field number for the "operateCard" field.</summary>
    public const int OperateCardFieldNumber = 2;
    private static readonly pb::FieldCodec<global::C2SEntity.OperateCard> _repeated_operateCard_codec
        = pb::FieldCodec.ForMessage(18, global::C2SEntity.OperateCard.Parser);
    private readonly pbc::RepeatedField<global::C2SEntity.OperateCard> operateCard_ = new pbc::RepeatedField<global::C2SEntity.OperateCard>();
    /// <summary>
    /// 牌的信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::C2SEntity.OperateCard> OperateCard {
      get { return operateCard_; }
    }

    /// <summary>Field number for the "can_out_card" field.</summary>
    public const int CanOutCardFieldNumber = 3;
    private bool canOutCard_;
    /// <summary>
    /// 是否能出牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanOutCard {
      get { return canOutCard_; }
      set {
        canOutCard_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerOutCardFailed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerOutCardFailed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomCodeId != other.RoomCodeId) return false;
      if(!operateCard_.Equals(other.operateCard_)) return false;
      if (CanOutCard != other.CanOutCard) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomCodeId != 0) hash ^= RoomCodeId.GetHashCode();
      hash ^= operateCard_.GetHashCode();
      if (CanOutCard != false) hash ^= CanOutCard.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomCodeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoomCodeId);
      }
      operateCard_.WriteTo(output, _repeated_operateCard_codec);
      if (CanOutCard != false) {
        output.WriteRawTag(24);
        output.WriteBool(CanOutCard);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomCodeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomCodeId);
      }
      size += operateCard_.CalculateSize(_repeated_operateCard_codec);
      if (CanOutCard != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerOutCardFailed other) {
      if (other == null) {
        return;
      }
      if (other.RoomCodeId != 0) {
        RoomCodeId = other.RoomCodeId;
      }
      operateCard_.Add(other.operateCard_);
      if (other.CanOutCard != false) {
        CanOutCard = other.CanOutCard;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomCodeId = input.ReadUInt32();
            break;
          }
          case 18: {
            operateCard_.AddEntriesFrom(input, _repeated_operateCard_codec);
            break;
          }
          case 24: {
            CanOutCard = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BroadcastPlayerOperate : pb::IMessage<BroadcastPlayerOperate> {
    private static readonly pb::MessageParser<BroadcastPlayerOperate> _parser = new pb::MessageParser<BroadcastPlayerOperate>(() => new BroadcastPlayerOperate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BroadcastPlayerOperate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2CEntity.S2CReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastPlayerOperate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastPlayerOperate(BroadcastPlayerOperate other) : this() {
      roomCodeId_ = other.roomCodeId_;
      position_ = other.position_;
      type_ = other.type_;
      operateCard_ = other.operateCard_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastPlayerOperate Clone() {
      return new BroadcastPlayerOperate(this);
    }

    /// <summary>Field number for the "room_code_id" field.</summary>
    public const int RoomCodeIdFieldNumber = 1;
    private uint roomCodeId_;
    /// <summary>
    /// 房间号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomCodeId {
      get { return roomCodeId_; }
      set {
        roomCodeId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private uint position_;
    /// <summary>
    /// 位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private uint type_;
    /// <summary>
    /// 操作类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "operateCard" field.</summary>
    public const int OperateCardFieldNumber = 4;
    private static readonly pb::FieldCodec<global::C2SEntity.OperateCard> _repeated_operateCard_codec
        = pb::FieldCodec.ForMessage(34, global::C2SEntity.OperateCard.Parser);
    private readonly pbc::RepeatedField<global::C2SEntity.OperateCard> operateCard_ = new pbc::RepeatedField<global::C2SEntity.OperateCard>();
    /// <summary>
    /// 牌的信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::C2SEntity.OperateCard> OperateCard {
      get { return operateCard_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BroadcastPlayerOperate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BroadcastPlayerOperate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomCodeId != other.RoomCodeId) return false;
      if (Position != other.Position) return false;
      if (Type != other.Type) return false;
      if(!operateCard_.Equals(other.operateCard_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomCodeId != 0) hash ^= RoomCodeId.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= operateCard_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomCodeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoomCodeId);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Position);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Type);
      }
      operateCard_.WriteTo(output, _repeated_operateCard_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomCodeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomCodeId);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      size += operateCard_.CalculateSize(_repeated_operateCard_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BroadcastPlayerOperate other) {
      if (other == null) {
        return;
      }
      if (other.RoomCodeId != 0) {
        RoomCodeId = other.RoomCodeId;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      operateCard_.Add(other.operateCard_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomCodeId = input.ReadUInt32();
            break;
          }
          case 16: {
            Position = input.ReadUInt32();
            break;
          }
          case 24: {
            Type = input.ReadUInt32();
            break;
          }
          case 34: {
            operateCard_.AddEntriesFrom(input, _repeated_operateCard_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SitPlayerInfo : pb::IMessage<SitPlayerInfo> {
    private static readonly pb::MessageParser<SitPlayerInfo> _parser = new pb::MessageParser<SitPlayerInfo>(() => new SitPlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SitPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2CEntity.S2CReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SitPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SitPlayerInfo(SitPlayerInfo other) : this() {
      position_ = other.position_;
      positionx_ = other.positionx_;
      positiony_ = other.positiony_;
      guid_ = other.guid_;
      sex_ = other.sex_;
      isReadyForRoom_ = other.isReadyForRoom_;
      isReadyForNextGame_ = other.isReadyForNextGame_;
      onForce_ = other.onForce_;
      clientIp_ = other.clientIp_;
      clientMask_ = other.clientMask_;
      otherName_ = other.otherName_;
      headIp_ = other.headIp_;
      changeScore_ = other.changeScore_;
      taoShangScore_ = other.taoShangScore_;
      score_ = other.score_;
      totalWinCount_ = other.totalWinCount_;
      totalZhuangCount_ = other.totalZhuangCount_;
      lastOperateType_ = other.lastOperateType_;
      cardCount_ = other.cardCount_;
      holdCards_ = other.holdCards_.Clone();
      dropCards_ = other.dropCards_.Clone();
      address_ = other.address_;
      totalPlayCount_ = other.totalPlayCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SitPlayerInfo Clone() {
      return new SitPlayerInfo(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private uint position_;
    /// <summary>
    /// 玩家位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "positionx" field.</summary>
    public const int PositionxFieldNumber = 2;
    private float positionx_;
    /// <summary>
    /// x坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Positionx {
      get { return positionx_; }
      set {
        positionx_ = value;
      }
    }

    /// <summary>Field number for the "positiony" field.</summary>
    public const int PositionyFieldNumber = 3;
    private float positiony_;
    /// <summary>
    /// y坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Positiony {
      get { return positiony_; }
      set {
        positiony_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 4;
    private ulong guid_;
    /// <summary>
    /// 玩家guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 5;
    private uint sex_;
    /// <summary>
    /// 玩家性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "is_ready_for_room" field.</summary>
    public const int IsReadyForRoomFieldNumber = 6;
    private bool isReadyForRoom_;
    /// <summary>
    /// 是否准备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReadyForRoom {
      get { return isReadyForRoom_; }
      set {
        isReadyForRoom_ = value;
      }
    }

    /// <summary>Field number for the "is_ready_for_next_game" field.</summary>
    public const int IsReadyForNextGameFieldNumber = 7;
    private bool isReadyForNextGame_;
    /// <summary>
    /// 是否准备开始下一局
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReadyForNextGame {
      get { return isReadyForNextGame_; }
      set {
        isReadyForNextGame_ = value;
      }
    }

    /// <summary>Field number for the "on_force" field.</summary>
    public const int OnForceFieldNumber = 8;
    private bool onForce_;
    /// <summary>
    /// 是否聚焦
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OnForce {
      get { return onForce_; }
      set {
        onForce_ = value;
      }
    }

    /// <summary>Field number for the "client_ip" field.</summary>
    public const int ClientIpFieldNumber = 9;
    private string clientIp_ = "";
    /// <summary>
    /// ip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientIp {
      get { return clientIp_; }
      set {
        clientIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_mask" field.</summary>
    public const int ClientMaskFieldNumber = 10;
    private string clientMask_ = "";
    /// <summary>
    /// mask
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientMask {
      get { return clientMask_; }
      set {
        clientMask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "other_name" field.</summary>
    public const int OtherNameFieldNumber = 11;
    private string otherName_ = "";
    /// <summary>
    /// 昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OtherName {
      get { return otherName_; }
      set {
        otherName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "head_ip" field.</summary>
    public const int HeadIpFieldNumber = 12;
    private string headIp_ = "";
    /// <summary>
    /// 头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadIp {
      get { return headIp_; }
      set {
        headIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "change_score" field.</summary>
    public const int ChangeScoreFieldNumber = 13;
    private int changeScore_;
    /// <summary>
    /// 改变的积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeScore {
      get { return changeScore_; }
      set {
        changeScore_ = value;
      }
    }

    /// <summary>Field number for the "tao_shang_score" field.</summary>
    public const int TaoShangScoreFieldNumber = 14;
    private int taoShangScore_;
    /// <summary>
    /// 讨赏分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaoShangScore {
      get { return taoShangScore_; }
      set {
        taoShangScore_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 15;
    private int score_;
    /// <summary>
    /// 分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "total_win_count" field.</summary>
    public const int TotalWinCountFieldNumber = 16;
    private uint totalWinCount_;
    /// <summary>
    /// 赢得次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalWinCount {
      get { return totalWinCount_; }
      set {
        totalWinCount_ = value;
      }
    }

    /// <summary>Field number for the "total_zhuang_count" field.</summary>
    public const int TotalZhuangCountFieldNumber = 17;
    private uint totalZhuangCount_;
    /// <summary>
    /// 当庄次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalZhuangCount {
      get { return totalZhuangCount_; }
      set {
        totalZhuangCount_ = value;
      }
    }

    /// <summary>Field number for the "last_operate_type" field.</summary>
    public const int LastOperateTypeFieldNumber = 18;
    private uint lastOperateType_;
    /// <summary>
    /// 最后的操作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastOperateType {
      get { return lastOperateType_; }
      set {
        lastOperateType_ = value;
      }
    }

    /// <summary>Field number for the "card_count" field.</summary>
    public const int CardCountFieldNumber = 19;
    private int cardCount_;
    /// <summary>
    /// 玩家手牌数量（位置非当前玩家位置，只有手牌数，没有具体手牌）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardCount {
      get { return cardCount_; }
      set {
        cardCount_ = value;
      }
    }

    /// <summary>Field number for the "hold_cards" field.</summary>
    public const int HoldCardsFieldNumber = 20;
    private static readonly pb::FieldCodec<uint> _repeated_holdCards_codec
        = pb::FieldCodec.ForUInt32(162);
    private readonly pbc::RepeatedField<uint> holdCards_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 手牌(如果位置不同，这处手牌为空，其他人看不到别人手牌)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> HoldCards {
      get { return holdCards_; }
    }

    /// <summary>Field number for the "drop_cards" field.</summary>
    public const int DropCardsFieldNumber = 21;
    private static readonly pb::FieldCodec<uint> _repeated_dropCards_codec
        = pb::FieldCodec.ForUInt32(170);
    private readonly pbc::RepeatedField<uint> dropCards_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 丢弃的牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DropCards {
      get { return dropCards_; }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 22;
    private string address_ = "";
    /// <summary>
    /// 玩家地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_play_count" field.</summary>
    public const int TotalPlayCountFieldNumber = 23;
    private uint totalPlayCount_;
    /// <summary>
    /// 总玩的局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalPlayCount {
      get { return totalPlayCount_; }
      set {
        totalPlayCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SitPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SitPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Position != other.Position) return false;
      if (Positionx != other.Positionx) return false;
      if (Positiony != other.Positiony) return false;
      if (Guid != other.Guid) return false;
      if (Sex != other.Sex) return false;
      if (IsReadyForRoom != other.IsReadyForRoom) return false;
      if (IsReadyForNextGame != other.IsReadyForNextGame) return false;
      if (OnForce != other.OnForce) return false;
      if (ClientIp != other.ClientIp) return false;
      if (ClientMask != other.ClientMask) return false;
      if (OtherName != other.OtherName) return false;
      if (HeadIp != other.HeadIp) return false;
      if (ChangeScore != other.ChangeScore) return false;
      if (TaoShangScore != other.TaoShangScore) return false;
      if (Score != other.Score) return false;
      if (TotalWinCount != other.TotalWinCount) return false;
      if (TotalZhuangCount != other.TotalZhuangCount) return false;
      if (LastOperateType != other.LastOperateType) return false;
      if (CardCount != other.CardCount) return false;
      if(!holdCards_.Equals(other.holdCards_)) return false;
      if(!dropCards_.Equals(other.dropCards_)) return false;
      if (Address != other.Address) return false;
      if (TotalPlayCount != other.TotalPlayCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Position != 0) hash ^= Position.GetHashCode();
      if (Positionx != 0F) hash ^= Positionx.GetHashCode();
      if (Positiony != 0F) hash ^= Positiony.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (IsReadyForRoom != false) hash ^= IsReadyForRoom.GetHashCode();
      if (IsReadyForNextGame != false) hash ^= IsReadyForNextGame.GetHashCode();
      if (OnForce != false) hash ^= OnForce.GetHashCode();
      if (ClientIp.Length != 0) hash ^= ClientIp.GetHashCode();
      if (ClientMask.Length != 0) hash ^= ClientMask.GetHashCode();
      if (OtherName.Length != 0) hash ^= OtherName.GetHashCode();
      if (HeadIp.Length != 0) hash ^= HeadIp.GetHashCode();
      if (ChangeScore != 0) hash ^= ChangeScore.GetHashCode();
      if (TaoShangScore != 0) hash ^= TaoShangScore.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (TotalWinCount != 0) hash ^= TotalWinCount.GetHashCode();
      if (TotalZhuangCount != 0) hash ^= TotalZhuangCount.GetHashCode();
      if (LastOperateType != 0) hash ^= LastOperateType.GetHashCode();
      if (CardCount != 0) hash ^= CardCount.GetHashCode();
      hash ^= holdCards_.GetHashCode();
      hash ^= dropCards_.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (TotalPlayCount != 0) hash ^= TotalPlayCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Position != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Position);
      }
      if (Positionx != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Positionx);
      }
      if (Positiony != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Positiony);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Guid);
      }
      if (Sex != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Sex);
      }
      if (IsReadyForRoom != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsReadyForRoom);
      }
      if (IsReadyForNextGame != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsReadyForNextGame);
      }
      if (OnForce != false) {
        output.WriteRawTag(64);
        output.WriteBool(OnForce);
      }
      if (ClientIp.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ClientIp);
      }
      if (ClientMask.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ClientMask);
      }
      if (OtherName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(OtherName);
      }
      if (HeadIp.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(HeadIp);
      }
      if (ChangeScore != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ChangeScore);
      }
      if (TaoShangScore != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(TaoShangScore);
      }
      if (Score != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Score);
      }
      if (TotalWinCount != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(TotalWinCount);
      }
      if (TotalZhuangCount != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(TotalZhuangCount);
      }
      if (LastOperateType != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(LastOperateType);
      }
      if (CardCount != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(CardCount);
      }
      holdCards_.WriteTo(output, _repeated_holdCards_codec);
      dropCards_.WriteTo(output, _repeated_dropCards_codec);
      if (Address.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Address);
      }
      if (TotalPlayCount != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(TotalPlayCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      if (Positionx != 0F) {
        size += 1 + 4;
      }
      if (Positiony != 0F) {
        size += 1 + 4;
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sex);
      }
      if (IsReadyForRoom != false) {
        size += 1 + 1;
      }
      if (IsReadyForNextGame != false) {
        size += 1 + 1;
      }
      if (OnForce != false) {
        size += 1 + 1;
      }
      if (ClientIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientIp);
      }
      if (ClientMask.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientMask);
      }
      if (OtherName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OtherName);
      }
      if (HeadIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadIp);
      }
      if (ChangeScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeScore);
      }
      if (TaoShangScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaoShangScore);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (TotalWinCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TotalWinCount);
      }
      if (TotalZhuangCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TotalZhuangCount);
      }
      if (LastOperateType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LastOperateType);
      }
      if (CardCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CardCount);
      }
      size += holdCards_.CalculateSize(_repeated_holdCards_codec);
      size += dropCards_.CalculateSize(_repeated_dropCards_codec);
      if (Address.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (TotalPlayCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TotalPlayCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SitPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
      if (other.Positionx != 0F) {
        Positionx = other.Positionx;
      }
      if (other.Positiony != 0F) {
        Positiony = other.Positiony;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.IsReadyForRoom != false) {
        IsReadyForRoom = other.IsReadyForRoom;
      }
      if (other.IsReadyForNextGame != false) {
        IsReadyForNextGame = other.IsReadyForNextGame;
      }
      if (other.OnForce != false) {
        OnForce = other.OnForce;
      }
      if (other.ClientIp.Length != 0) {
        ClientIp = other.ClientIp;
      }
      if (other.ClientMask.Length != 0) {
        ClientMask = other.ClientMask;
      }
      if (other.OtherName.Length != 0) {
        OtherName = other.OtherName;
      }
      if (other.HeadIp.Length != 0) {
        HeadIp = other.HeadIp;
      }
      if (other.ChangeScore != 0) {
        ChangeScore = other.ChangeScore;
      }
      if (other.TaoShangScore != 0) {
        TaoShangScore = other.TaoShangScore;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.TotalWinCount != 0) {
        TotalWinCount = other.TotalWinCount;
      }
      if (other.TotalZhuangCount != 0) {
        TotalZhuangCount = other.TotalZhuangCount;
      }
      if (other.LastOperateType != 0) {
        LastOperateType = other.LastOperateType;
      }
      if (other.CardCount != 0) {
        CardCount = other.CardCount;
      }
      holdCards_.Add(other.holdCards_);
      dropCards_.Add(other.dropCards_);
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.TotalPlayCount != 0) {
        TotalPlayCount = other.TotalPlayCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Position = input.ReadUInt32();
            break;
          }
          case 21: {
            Positionx = input.ReadFloat();
            break;
          }
          case 29: {
            Positiony = input.ReadFloat();
            break;
          }
          case 32: {
            Guid = input.ReadUInt64();
            break;
          }
          case 40: {
            Sex = input.ReadUInt32();
            break;
          }
          case 48: {
            IsReadyForRoom = input.ReadBool();
            break;
          }
          case 56: {
            IsReadyForNextGame = input.ReadBool();
            break;
          }
          case 64: {
            OnForce = input.ReadBool();
            break;
          }
          case 74: {
            ClientIp = input.ReadString();
            break;
          }
          case 82: {
            ClientMask = input.ReadString();
            break;
          }
          case 90: {
            OtherName = input.ReadString();
            break;
          }
          case 98: {
            HeadIp = input.ReadString();
            break;
          }
          case 104: {
            ChangeScore = input.ReadInt32();
            break;
          }
          case 112: {
            TaoShangScore = input.ReadInt32();
            break;
          }
          case 120: {
            Score = input.ReadInt32();
            break;
          }
          case 128: {
            TotalWinCount = input.ReadUInt32();
            break;
          }
          case 136: {
            TotalZhuangCount = input.ReadUInt32();
            break;
          }
          case 144: {
            LastOperateType = input.ReadUInt32();
            break;
          }
          case 152: {
            CardCount = input.ReadInt32();
            break;
          }
          case 162:
          case 160: {
            holdCards_.AddEntriesFrom(input, _repeated_holdCards_codec);
            break;
          }
          case 170:
          case 168: {
            dropCards_.AddEntriesFrom(input, _repeated_dropCards_codec);
            break;
          }
          case 178: {
            Address = input.ReadString();
            break;
          }
          case 184: {
            TotalPlayCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FinishInfo : pb::IMessage<FinishInfo> {
    private static readonly pb::MessageParser<FinishInfo> _parser = new pb::MessageParser<FinishInfo>(() => new FinishInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FinishInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2CEntity.S2CReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishInfo(FinishInfo other) : this() {
      finishPosition_ = other.finishPosition_;
      finishOrder_ = other.finishOrder_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishInfo Clone() {
      return new FinishInfo(this);
    }

    /// <summary>Field number for the "finish_position" field.</summary>
    public const int FinishPositionFieldNumber = 1;
    private uint finishPosition_;
    /// <summary>
    /// 完成玩家的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FinishPosition {
      get { return finishPosition_; }
      set {
        finishPosition_ = value;
      }
    }

    /// <summary>Field number for the "finish_order" field.</summary>
    public const int FinishOrderFieldNumber = 2;
    private uint finishOrder_;
    /// <summary>
    /// 完成的次序（1,2,两人完成就结束）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FinishOrder {
      get { return finishOrder_; }
      set {
        finishOrder_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FinishInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FinishInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FinishPosition != other.FinishPosition) return false;
      if (FinishOrder != other.FinishOrder) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FinishPosition != 0) hash ^= FinishPosition.GetHashCode();
      if (FinishOrder != 0) hash ^= FinishOrder.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FinishPosition != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FinishPosition);
      }
      if (FinishOrder != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FinishOrder);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FinishPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FinishPosition);
      }
      if (FinishOrder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FinishOrder);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FinishInfo other) {
      if (other == null) {
        return;
      }
      if (other.FinishPosition != 0) {
        FinishPosition = other.FinishPosition;
      }
      if (other.FinishOrder != 0) {
        FinishOrder = other.FinishOrder;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FinishPosition = input.ReadUInt32();
            break;
          }
          case 16: {
            FinishOrder = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayStatusInfo : pb::IMessage<PlayStatusInfo> {
    private static readonly pb::MessageParser<PlayStatusInfo> _parser = new pb::MessageParser<PlayStatusInfo>(() => new PlayStatusInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayStatusInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2CEntity.S2CReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayStatusInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayStatusInfo(PlayStatusInfo other) : this() {
      friendPosition_ = other.friendPosition_;
      lastDropCardPosition_ = other.lastDropCardPosition_;
      waitDropPosition_ = other.waitDropPosition_;
      hasDropCard_ = other.hasDropCard_;
      dropCards_ = other.dropCards_.Clone();
      finishCount_ = other.finishCount_;
      finishInfo_ = other.finishInfo_.Clone();
      baoPaiPosition_ = other.baoPaiPosition_;
      askBaoPaiPosition_ = other.askBaoPaiPosition_;
      anotherFriendPosition_ = other.anotherFriendPosition_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayStatusInfo Clone() {
      return new PlayStatusInfo(this);
    }

    /// <summary>Field number for the "friend_position" field.</summary>
    public const int FriendPositionFieldNumber = 1;
    private uint friendPosition_;
    /// <summary>
    /// 朋友位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FriendPosition {
      get { return friendPosition_; }
      set {
        friendPosition_ = value;
      }
    }

    /// <summary>Field number for the "last_drop_card_position" field.</summary>
    public const int LastDropCardPositionFieldNumber = 2;
    private uint lastDropCardPosition_;
    /// <summary>
    /// 最后出牌的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastDropCardPosition {
      get { return lastDropCardPosition_; }
      set {
        lastDropCardPosition_ = value;
      }
    }

    /// <summary>Field number for the "wait_drop_position" field.</summary>
    public const int WaitDropPositionFieldNumber = 3;
    private uint waitDropPosition_;
    /// <summary>
    /// 等待弃牌的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WaitDropPosition {
      get { return waitDropPosition_; }
      set {
        waitDropPosition_ = value;
      }
    }

    /// <summary>Field number for the "has_drop_card" field.</summary>
    public const int HasDropCardFieldNumber = 4;
    private bool hasDropCard_;
    /// <summary>
    /// 是否有人出牌(有出牌，才有出的牌)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDropCard {
      get { return hasDropCard_; }
      set {
        hasDropCard_ = value;
      }
    }

    /// <summary>Field number for the "drop_cards" field.</summary>
    public const int DropCardsFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_dropCards_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> dropCards_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 出的牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DropCards {
      get { return dropCards_; }
    }

    /// <summary>Field number for the "finish_count" field.</summary>
    public const int FinishCountFieldNumber = 6;
    private int finishCount_;
    /// <summary>
    /// 完成人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinishCount {
      get { return finishCount_; }
      set {
        finishCount_ = value;
      }
    }

    /// <summary>Field number for the "finish_info" field.</summary>
    public const int FinishInfoFieldNumber = 7;
    private static readonly pb::FieldCodec<global::S2CEntity.FinishInfo> _repeated_finishInfo_codec
        = pb::FieldCodec.ForMessage(58, global::S2CEntity.FinishInfo.Parser);
    private readonly pbc::RepeatedField<global::S2CEntity.FinishInfo> finishInfo_ = new pbc::RepeatedField<global::S2CEntity.FinishInfo>();
    /// <summary>
    /// 完成玩家的信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::S2CEntity.FinishInfo> FinishInfo {
      get { return finishInfo_; }
    }

    /// <summary>Field number for the "bao_pai_position" field.</summary>
    public const int BaoPaiPositionFieldNumber = 8;
    private uint baoPaiPosition_;
    /// <summary>
    /// 包牌人位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BaoPaiPosition {
      get { return baoPaiPosition_; }
      set {
        baoPaiPosition_ = value;
      }
    }

    /// <summary>Field number for the "ask_bao_pai_position" field.</summary>
    public const int AskBaoPaiPositionFieldNumber = 9;
    private uint askBaoPaiPosition_;
    /// <summary>
    /// 正在询问包牌人的位置，如果不询问，这个值为PositionType.None
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AskBaoPaiPosition {
      get { return askBaoPaiPosition_; }
      set {
        askBaoPaiPosition_ = value;
      }
    }

    /// <summary>Field number for the "another_friend_position" field.</summary>
    public const int AnotherFriendPositionFieldNumber = 10;
    private uint anotherFriendPosition_;
    /// <summary>
    /// 另一个朋友位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AnotherFriendPosition {
      get { return anotherFriendPosition_; }
      set {
        anotherFriendPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayStatusInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayStatusInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FriendPosition != other.FriendPosition) return false;
      if (LastDropCardPosition != other.LastDropCardPosition) return false;
      if (WaitDropPosition != other.WaitDropPosition) return false;
      if (HasDropCard != other.HasDropCard) return false;
      if(!dropCards_.Equals(other.dropCards_)) return false;
      if (FinishCount != other.FinishCount) return false;
      if(!finishInfo_.Equals(other.finishInfo_)) return false;
      if (BaoPaiPosition != other.BaoPaiPosition) return false;
      if (AskBaoPaiPosition != other.AskBaoPaiPosition) return false;
      if (AnotherFriendPosition != other.AnotherFriendPosition) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FriendPosition != 0) hash ^= FriendPosition.GetHashCode();
      if (LastDropCardPosition != 0) hash ^= LastDropCardPosition.GetHashCode();
      if (WaitDropPosition != 0) hash ^= WaitDropPosition.GetHashCode();
      if (HasDropCard != false) hash ^= HasDropCard.GetHashCode();
      hash ^= dropCards_.GetHashCode();
      if (FinishCount != 0) hash ^= FinishCount.GetHashCode();
      hash ^= finishInfo_.GetHashCode();
      if (BaoPaiPosition != 0) hash ^= BaoPaiPosition.GetHashCode();
      if (AskBaoPaiPosition != 0) hash ^= AskBaoPaiPosition.GetHashCode();
      if (AnotherFriendPosition != 0) hash ^= AnotherFriendPosition.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FriendPosition != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FriendPosition);
      }
      if (LastDropCardPosition != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LastDropCardPosition);
      }
      if (WaitDropPosition != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(WaitDropPosition);
      }
      if (HasDropCard != false) {
        output.WriteRawTag(32);
        output.WriteBool(HasDropCard);
      }
      dropCards_.WriteTo(output, _repeated_dropCards_codec);
      if (FinishCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FinishCount);
      }
      finishInfo_.WriteTo(output, _repeated_finishInfo_codec);
      if (BaoPaiPosition != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(BaoPaiPosition);
      }
      if (AskBaoPaiPosition != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(AskBaoPaiPosition);
      }
      if (AnotherFriendPosition != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(AnotherFriendPosition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FriendPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FriendPosition);
      }
      if (LastDropCardPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastDropCardPosition);
      }
      if (WaitDropPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitDropPosition);
      }
      if (HasDropCard != false) {
        size += 1 + 1;
      }
      size += dropCards_.CalculateSize(_repeated_dropCards_codec);
      if (FinishCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinishCount);
      }
      size += finishInfo_.CalculateSize(_repeated_finishInfo_codec);
      if (BaoPaiPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BaoPaiPosition);
      }
      if (AskBaoPaiPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AskBaoPaiPosition);
      }
      if (AnotherFriendPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AnotherFriendPosition);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayStatusInfo other) {
      if (other == null) {
        return;
      }
      if (other.FriendPosition != 0) {
        FriendPosition = other.FriendPosition;
      }
      if (other.LastDropCardPosition != 0) {
        LastDropCardPosition = other.LastDropCardPosition;
      }
      if (other.WaitDropPosition != 0) {
        WaitDropPosition = other.WaitDropPosition;
      }
      if (other.HasDropCard != false) {
        HasDropCard = other.HasDropCard;
      }
      dropCards_.Add(other.dropCards_);
      if (other.FinishCount != 0) {
        FinishCount = other.FinishCount;
      }
      finishInfo_.Add(other.finishInfo_);
      if (other.BaoPaiPosition != 0) {
        BaoPaiPosition = other.BaoPaiPosition;
      }
      if (other.AskBaoPaiPosition != 0) {
        AskBaoPaiPosition = other.AskBaoPaiPosition;
      }
      if (other.AnotherFriendPosition != 0) {
        AnotherFriendPosition = other.AnotherFriendPosition;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FriendPosition = input.ReadUInt32();
            break;
          }
          case 16: {
            LastDropCardPosition = input.ReadUInt32();
            break;
          }
          case 24: {
            WaitDropPosition = input.ReadUInt32();
            break;
          }
          case 32: {
            HasDropCard = input.ReadBool();
            break;
          }
          case 42:
          case 40: {
            dropCards_.AddEntriesFrom(input, _repeated_dropCards_codec);
            break;
          }
          case 48: {
            FinishCount = input.ReadInt32();
            break;
          }
          case 58: {
            finishInfo_.AddEntriesFrom(input, _repeated_finishInfo_codec);
            break;
          }
          case 64: {
            BaoPaiPosition = input.ReadUInt32();
            break;
          }
          case 72: {
            AskBaoPaiPosition = input.ReadUInt32();
            break;
          }
          case 80: {
            AnotherFriendPosition = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CatchedCard : pb::IMessage<CatchedCard> {
    private static readonly pb::MessageParser<CatchedCard> _parser = new pb::MessageParser<CatchedCard>(() => new CatchedCard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CatchedCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2CEntity.S2CReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatchedCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatchedCard(CatchedCard other) : this() {
      card_ = other.card_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatchedCard Clone() {
      return new CatchedCard(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_card_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> card_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 出的牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Card {
      get { return card_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CatchedCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CatchedCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!card_.Equals(other.card_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= card_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      card_.WriteTo(output, _repeated_card_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += card_.CalculateSize(_repeated_card_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CatchedCard other) {
      if (other == null) {
        return;
      }
      card_.Add(other.card_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            card_.AddEntriesFrom(input, _repeated_card_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameOverPlayerInfo : pb::IMessage<GameOverPlayerInfo> {
    private static readonly pb::MessageParser<GameOverPlayerInfo> _parser = new pb::MessageParser<GameOverPlayerInfo>(() => new GameOverPlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameOverPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2CEntity.S2CReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOverPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOverPlayerInfo(GameOverPlayerInfo other) : this() {
      isWinner_ = other.isWinner_;
      position_ = other.position_;
      score_ = other.score_;
      changeScore_ = other.changeScore_;
      baseScore_ = other.baseScore_;
      zhanDanScore_ = other.zhanDanScore_;
      faWangScore_ = other.faWangScore_;
      cards_ = other.cards_.Clone();
      catchedCard_ = other.catchedCard_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOverPlayerInfo Clone() {
      return new GameOverPlayerInfo(this);
    }

    /// <summary>Field number for the "is_winner" field.</summary>
    public const int IsWinnerFieldNumber = 1;
    private bool isWinner_;
    /// <summary>
    /// 是否是赢的人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWinner {
      get { return isWinner_; }
      set {
        isWinner_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private uint position_;
    /// <summary>
    /// 玩家位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private int score_;
    /// <summary>
    /// 玩家分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "change_score" field.</summary>
    public const int ChangeScoreFieldNumber = 4;
    private int changeScore_;
    /// <summary>
    /// 改变的分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeScore {
      get { return changeScore_; }
      set {
        changeScore_ = value;
      }
    }

    /// <summary>Field number for the "base_score" field.</summary>
    public const int BaseScoreFieldNumber = 5;
    private int baseScore_;
    /// <summary>
    /// 回合分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseScore {
      get { return baseScore_; }
      set {
        baseScore_ = value;
      }
    }

    /// <summary>Field number for the "zhan_dan_score" field.</summary>
    public const int ZhanDanScoreFieldNumber = 6;
    private int zhanDanScore_;
    /// <summary>
    /// 炸弹分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZhanDanScore {
      get { return zhanDanScore_; }
      set {
        zhanDanScore_ = value;
      }
    }

    /// <summary>Field number for the "fa_wang_score" field.</summary>
    public const int FaWangScoreFieldNumber = 7;
    private int faWangScore_;
    /// <summary>
    /// 罚王分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FaWangScore {
      get { return faWangScore_; }
      set {
        faWangScore_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_cards_codec
        = pb::FieldCodec.ForUInt32(66);
    private readonly pbc::RepeatedField<uint> cards_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 剩余的手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "catched_card" field.</summary>
    public const int CatchedCardFieldNumber = 9;
    private static readonly pb::FieldCodec<global::S2CEntity.CatchedCard> _repeated_catchedCard_codec
        = pb::FieldCodec.ForMessage(74, global::S2CEntity.CatchedCard.Parser);
    private readonly pbc::RepeatedField<global::S2CEntity.CatchedCard> catchedCard_ = new pbc::RepeatedField<global::S2CEntity.CatchedCard>();
    /// <summary>
    /// 一下在游戏结束时才有数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::S2CEntity.CatchedCard> CatchedCard {
      get { return catchedCard_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameOverPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameOverPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsWinner != other.IsWinner) return false;
      if (Position != other.Position) return false;
      if (Score != other.Score) return false;
      if (ChangeScore != other.ChangeScore) return false;
      if (BaseScore != other.BaseScore) return false;
      if (ZhanDanScore != other.ZhanDanScore) return false;
      if (FaWangScore != other.FaWangScore) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if(!catchedCard_.Equals(other.catchedCard_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsWinner != false) hash ^= IsWinner.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (ChangeScore != 0) hash ^= ChangeScore.GetHashCode();
      if (BaseScore != 0) hash ^= BaseScore.GetHashCode();
      if (ZhanDanScore != 0) hash ^= ZhanDanScore.GetHashCode();
      if (FaWangScore != 0) hash ^= FaWangScore.GetHashCode();
      hash ^= cards_.GetHashCode();
      hash ^= catchedCard_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsWinner != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsWinner);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Position);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (ChangeScore != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ChangeScore);
      }
      if (BaseScore != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BaseScore);
      }
      if (ZhanDanScore != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ZhanDanScore);
      }
      if (FaWangScore != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FaWangScore);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      catchedCard_.WriteTo(output, _repeated_catchedCard_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsWinner != false) {
        size += 1 + 1;
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (ChangeScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeScore);
      }
      if (BaseScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseScore);
      }
      if (ZhanDanScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZhanDanScore);
      }
      if (FaWangScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaWangScore);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      size += catchedCard_.CalculateSize(_repeated_catchedCard_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameOverPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.IsWinner != false) {
        IsWinner = other.IsWinner;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.ChangeScore != 0) {
        ChangeScore = other.ChangeScore;
      }
      if (other.BaseScore != 0) {
        BaseScore = other.BaseScore;
      }
      if (other.ZhanDanScore != 0) {
        ZhanDanScore = other.ZhanDanScore;
      }
      if (other.FaWangScore != 0) {
        FaWangScore = other.FaWangScore;
      }
      cards_.Add(other.cards_);
      catchedCard_.Add(other.catchedCard_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsWinner = input.ReadBool();
            break;
          }
          case 16: {
            Position = input.ReadUInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
          case 32: {
            ChangeScore = input.ReadInt32();
            break;
          }
          case 40: {
            BaseScore = input.ReadInt32();
            break;
          }
          case 48: {
            ZhanDanScore = input.ReadInt32();
            break;
          }
          case 56: {
            FaWangScore = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 74: {
            catchedCard_.AddEntriesFrom(input, _repeated_catchedCard_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameOverInfo : pb::IMessage<GameOverInfo> {
    private static readonly pb::MessageParser<GameOverInfo> _parser = new pb::MessageParser<GameOverInfo>(() => new GameOverInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameOverInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2CEntity.S2CReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOverInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOverInfo(GameOverInfo other) : this() {
      zhuangPosition_ = other.zhuangPosition_;
      friendPosition_ = other.friendPosition_;
      gameOverPlayerInfo_ = other.gameOverPlayerInfo_.Clone();
      finishInfo_ = other.finishInfo_.Clone();
      baoPaiPosition_ = other.baoPaiPosition_;
      isTp_ = other.isTp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOverInfo Clone() {
      return new GameOverInfo(this);
    }

    /// <summary>Field number for the "zhuang_position" field.</summary>
    public const int ZhuangPositionFieldNumber = 1;
    private uint zhuangPosition_;
    /// <summary>
    /// 庄的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ZhuangPosition {
      get { return zhuangPosition_; }
      set {
        zhuangPosition_ = value;
      }
    }

    /// <summary>Field number for the "friend_position" field.</summary>
    public const int FriendPositionFieldNumber = 2;
    private uint friendPosition_;
    /// <summary>
    /// 朋友的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FriendPosition {
      get { return friendPosition_; }
      set {
        friendPosition_ = value;
      }
    }

    /// <summary>Field number for the "game_over_player_info" field.</summary>
    public const int GameOverPlayerInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::S2CEntity.GameOverPlayerInfo> _repeated_gameOverPlayerInfo_codec
        = pb::FieldCodec.ForMessage(26, global::S2CEntity.GameOverPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::S2CEntity.GameOverPlayerInfo> gameOverPlayerInfo_ = new pbc::RepeatedField<global::S2CEntity.GameOverPlayerInfo>();
    /// <summary>
    /// 游戏结束，玩家结算信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::S2CEntity.GameOverPlayerInfo> GameOverPlayerInfo {
      get { return gameOverPlayerInfo_; }
    }

    /// <summary>Field number for the "finish_info" field.</summary>
    public const int FinishInfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::S2CEntity.FinishInfo> _repeated_finishInfo_codec
        = pb::FieldCodec.ForMessage(34, global::S2CEntity.FinishInfo.Parser);
    private readonly pbc::RepeatedField<global::S2CEntity.FinishInfo> finishInfo_ = new pbc::RepeatedField<global::S2CEntity.FinishInfo>();
    /// <summary>
    /// 完成玩家的信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::S2CEntity.FinishInfo> FinishInfo {
      get { return finishInfo_; }
    }

    /// <summary>Field number for the "bao_pai_position" field.</summary>
    public const int BaoPaiPositionFieldNumber = 5;
    private uint baoPaiPosition_;
    /// <summary>
    /// 包牌人位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BaoPaiPosition {
      get { return baoPaiPosition_; }
      set {
        baoPaiPosition_ = value;
      }
    }

    /// <summary>Field number for the "is_tp" field.</summary>
    public const int IsTpFieldNumber = 6;
    private bool isTp_;
    /// <summary>
    /// 是否摊牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTp {
      get { return isTp_; }
      set {
        isTp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameOverInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameOverInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ZhuangPosition != other.ZhuangPosition) return false;
      if (FriendPosition != other.FriendPosition) return false;
      if(!gameOverPlayerInfo_.Equals(other.gameOverPlayerInfo_)) return false;
      if(!finishInfo_.Equals(other.finishInfo_)) return false;
      if (BaoPaiPosition != other.BaoPaiPosition) return false;
      if (IsTp != other.IsTp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ZhuangPosition != 0) hash ^= ZhuangPosition.GetHashCode();
      if (FriendPosition != 0) hash ^= FriendPosition.GetHashCode();
      hash ^= gameOverPlayerInfo_.GetHashCode();
      hash ^= finishInfo_.GetHashCode();
      if (BaoPaiPosition != 0) hash ^= BaoPaiPosition.GetHashCode();
      if (IsTp != false) hash ^= IsTp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZhuangPosition != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ZhuangPosition);
      }
      if (FriendPosition != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FriendPosition);
      }
      gameOverPlayerInfo_.WriteTo(output, _repeated_gameOverPlayerInfo_codec);
      finishInfo_.WriteTo(output, _repeated_finishInfo_codec);
      if (BaoPaiPosition != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(BaoPaiPosition);
      }
      if (IsTp != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsTp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZhuangPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ZhuangPosition);
      }
      if (FriendPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FriendPosition);
      }
      size += gameOverPlayerInfo_.CalculateSize(_repeated_gameOverPlayerInfo_codec);
      size += finishInfo_.CalculateSize(_repeated_finishInfo_codec);
      if (BaoPaiPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BaoPaiPosition);
      }
      if (IsTp != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameOverInfo other) {
      if (other == null) {
        return;
      }
      if (other.ZhuangPosition != 0) {
        ZhuangPosition = other.ZhuangPosition;
      }
      if (other.FriendPosition != 0) {
        FriendPosition = other.FriendPosition;
      }
      gameOverPlayerInfo_.Add(other.gameOverPlayerInfo_);
      finishInfo_.Add(other.finishInfo_);
      if (other.BaoPaiPosition != 0) {
        BaoPaiPosition = other.BaoPaiPosition;
      }
      if (other.IsTp != false) {
        IsTp = other.IsTp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ZhuangPosition = input.ReadUInt32();
            break;
          }
          case 16: {
            FriendPosition = input.ReadUInt32();
            break;
          }
          case 26: {
            gameOverPlayerInfo_.AddEntriesFrom(input, _repeated_gameOverPlayerInfo_codec);
            break;
          }
          case 34: {
            finishInfo_.AddEntriesFrom(input, _repeated_finishInfo_codec);
            break;
          }
          case 40: {
            BaoPaiPosition = input.ReadUInt32();
            break;
          }
          case 48: {
            IsTp = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendRoomInfo : pb::IMessage<SendRoomInfo> {
    private static readonly pb::MessageParser<SendRoomInfo> _parser = new pb::MessageParser<SendRoomInfo>(() => new SendRoomInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendRoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2CEntity.S2CReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRoomInfo(SendRoomInfo other) : this() {
      roomCodeId_ = other.roomCodeId_;
      creatorGuid_ = other.creatorGuid_;
      gameCount_ = other.gameCount_;
      createRoomType_ = other.createRoomType_;
      zhuangPosition_ = other.zhuangPosition_;
      zhuangCount_ = other.zhuangCount_;
      roomStatus_ = other.roomStatus_;
      curGameCount_ = other.curGameCount_;
      queryDisposeRoom_ = other.queryDisposeRoom_;
      timerRest_ = other.timerRest_;
      agressPosition_ = other.agressPosition_.Clone();
      sitPlayerInfo_ = other.sitPlayerInfo_.Clone();
      PlayStatusInfo = other.playStatusInfo_ != null ? other.PlayStatusInfo.Clone() : null;
      GameOverInfo = other.gameOverInfo_ != null ? other.GameOverInfo.Clone() : null;
      playerCount_ = other.playerCount_;
      playCount_ = other.playCount_;
      playType_ = other.playType_;
      jiangMa_ = other.jiangMa_.Clone();
      faWangTp_ = other.faWangTp_;
      wuZhaTp_ = other.wuZhaTp_;
      isBaWang_ = other.isBaWang_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRoomInfo Clone() {
      return new SendRoomInfo(this);
    }

    /// <summary>Field number for the "room_code_id" field.</summary>
    public const int RoomCodeIdFieldNumber = 1;
    private uint roomCodeId_;
    /// <summary>
    /// 房间号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomCodeId {
      get { return roomCodeId_; }
      set {
        roomCodeId_ = value;
      }
    }

    /// <summary>Field number for the "creator_guid" field.</summary>
    public const int CreatorGuidFieldNumber = 2;
    private ulong creatorGuid_;
    /// <summary>
    /// 房主guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreatorGuid {
      get { return creatorGuid_; }
      set {
        creatorGuid_ = value;
      }
    }

    /// <summary>Field number for the "game_count" field.</summary>
    public const int GameCountFieldNumber = 3;
    private uint gameCount_;
    /// <summary>
    /// 总局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameCount {
      get { return gameCount_; }
      set {
        gameCount_ = value;
      }
    }

    /// <summary>Field number for the "create_room_type" field.</summary>
    public const int CreateRoomTypeFieldNumber = 4;
    private uint createRoomType_;
    /// <summary>
    /// 开房类型（现在全是俱乐部开房:ClubCreate)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateRoomType {
      get { return createRoomType_; }
      set {
        createRoomType_ = value;
      }
    }

    /// <summary>Field number for the "zhuang_position" field.</summary>
    public const int ZhuangPositionFieldNumber = 5;
    private uint zhuangPosition_;
    /// <summary>
    /// 庄家位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ZhuangPosition {
      get { return zhuangPosition_; }
      set {
        zhuangPosition_ = value;
      }
    }

    /// <summary>Field number for the "zhuang_count" field.</summary>
    public const int ZhuangCountFieldNumber = 6;
    private uint zhuangCount_;
    /// <summary>
    /// 连庄次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ZhuangCount {
      get { return zhuangCount_; }
      set {
        zhuangCount_ = value;
      }
    }

    /// <summary>Field number for the "room_status" field.</summary>
    public const int RoomStatusFieldNumber = 7;
    private uint roomStatus_;
    /// <summary>
    /// 房间状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomStatus {
      get { return roomStatus_; }
      set {
        roomStatus_ = value;
      }
    }

    /// <summary>Field number for the "cur_game_count" field.</summary>
    public const int CurGameCountFieldNumber = 8;
    private uint curGameCount_;
    /// <summary>
    /// 当前局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurGameCount {
      get { return curGameCount_; }
      set {
        curGameCount_ = value;
      }
    }

    /// <summary>Field number for the "query_dispose_room" field.</summary>
    public const int QueryDisposeRoomFieldNumber = 9;
    private bool queryDisposeRoom_;
    /// <summary>
    /// 是否有申请离开房间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool QueryDisposeRoom {
      get { return queryDisposeRoom_; }
      set {
        queryDisposeRoom_ = value;
      }
    }

    /// <summary>Field number for the "timer_rest" field.</summary>
    public const int TimerRestFieldNumber = 10;
    private uint timerRest_;
    /// <summary>
    /// 申请离开房间倒计时剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimerRest {
      get { return timerRest_; }
      set {
        timerRest_ = value;
      }
    }

    /// <summary>Field number for the "agress_position" field.</summary>
    public const int AgressPositionFieldNumber = 11;
    private static readonly pb::FieldCodec<uint> _repeated_agressPosition_codec
        = pb::FieldCodec.ForUInt32(90);
    private readonly pbc::RepeatedField<uint> agressPosition_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 同意离开玩家位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AgressPosition {
      get { return agressPosition_; }
    }

    /// <summary>Field number for the "sit_player_info" field.</summary>
    public const int SitPlayerInfoFieldNumber = 12;
    private static readonly pb::FieldCodec<global::S2CEntity.SitPlayerInfo> _repeated_sitPlayerInfo_codec
        = pb::FieldCodec.ForMessage(98, global::S2CEntity.SitPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::S2CEntity.SitPlayerInfo> sitPlayerInfo_ = new pbc::RepeatedField<global::S2CEntity.SitPlayerInfo>();
    /// <summary>
    /// 在座玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::S2CEntity.SitPlayerInfo> SitPlayerInfo {
      get { return sitPlayerInfo_; }
    }

    /// <summary>Field number for the "play_status_info" field.</summary>
    public const int PlayStatusInfoFieldNumber = 13;
    private global::S2CEntity.PlayStatusInfo playStatusInfo_;
    /// <summary>
    /// PlayStatusInfo和GameOverInfo 是两个状态，两者只有一个有值，PlayStatusInfo是游戏进行中的数据，即RoomStatusType.Play
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CEntity.PlayStatusInfo PlayStatusInfo {
      get { return playStatusInfo_; }
      set {
        playStatusInfo_ = value;
      }
    }

    /// <summary>Field number for the "game_over_info" field.</summary>
    public const int GameOverInfoFieldNumber = 14;
    private global::S2CEntity.GameOverInfo gameOverInfo_;
    /// <summary>
    /// GameOverInfo为RoomStatusType.Over
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2CEntity.GameOverInfo GameOverInfo {
      get { return gameOverInfo_; }
      set {
        gameOverInfo_ = value;
      }
    }

    /// <summary>Field number for the "player_count" field.</summary>
    public const int PlayerCountFieldNumber = 15;
    private uint playerCount_;
    /// <summary>
    /// 玩家人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerCount {
      get { return playerCount_; }
      set {
        playerCount_ = value;
      }
    }

    /// <summary>Field number for the "play_count" field.</summary>
    public const int PlayCountFieldNumber = 16;
    private uint playCount_;
    /// <summary>
    /// 局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayCount {
      get { return playCount_; }
      set {
        playCount_ = value;
      }
    }

    /// <summary>Field number for the "play_type" field.</summary>
    public const int PlayTypeFieldNumber = 17;
    private uint playType_;
    /// <summary>
    /// 玩法下标（枚举类:PlayType)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    /// <summary>Field number for the "jiang_ma" field.</summary>
    public const int JiangMaFieldNumber = 18;
    private static readonly pb::FieldCodec<uint> _repeated_jiangMa_codec
        = pb::FieldCodec.ForUInt32(146);
    private readonly pbc::RepeatedField<uint> jiangMa_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 开奖（牌数，{7,11,13,14}）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> JiangMa {
      get { return jiangMa_; }
    }

    /// <summary>Field number for the "fa_wang_tp" field.</summary>
    public const int FaWangTpFieldNumber = 19;
    private bool faWangTp_;
    /// <summary>
    /// 罚王摊牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FaWangTp {
      get { return faWangTp_; }
      set {
        faWangTp_ = value;
      }
    }

    /// <summary>Field number for the "wu_zha_tp" field.</summary>
    public const int WuZhaTpFieldNumber = 20;
    private bool wuZhaTp_;
    /// <summary>
    /// 无炸摊牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WuZhaTp {
      get { return wuZhaTp_; }
      set {
        wuZhaTp_ = value;
      }
    }

    /// <summary>Field number for the "is_ba_wang" field.</summary>
    public const int IsBaWangFieldNumber = 21;
    private bool isBaWang_;
    /// <summary>
    /// 是否是八王
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBaWang {
      get { return isBaWang_; }
      set {
        isBaWang_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendRoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendRoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomCodeId != other.RoomCodeId) return false;
      if (CreatorGuid != other.CreatorGuid) return false;
      if (GameCount != other.GameCount) return false;
      if (CreateRoomType != other.CreateRoomType) return false;
      if (ZhuangPosition != other.ZhuangPosition) return false;
      if (ZhuangCount != other.ZhuangCount) return false;
      if (RoomStatus != other.RoomStatus) return false;
      if (CurGameCount != other.CurGameCount) return false;
      if (QueryDisposeRoom != other.QueryDisposeRoom) return false;
      if (TimerRest != other.TimerRest) return false;
      if(!agressPosition_.Equals(other.agressPosition_)) return false;
      if(!sitPlayerInfo_.Equals(other.sitPlayerInfo_)) return false;
      if (!object.Equals(PlayStatusInfo, other.PlayStatusInfo)) return false;
      if (!object.Equals(GameOverInfo, other.GameOverInfo)) return false;
      if (PlayerCount != other.PlayerCount) return false;
      if (PlayCount != other.PlayCount) return false;
      if (PlayType != other.PlayType) return false;
      if(!jiangMa_.Equals(other.jiangMa_)) return false;
      if (FaWangTp != other.FaWangTp) return false;
      if (WuZhaTp != other.WuZhaTp) return false;
      if (IsBaWang != other.IsBaWang) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomCodeId != 0) hash ^= RoomCodeId.GetHashCode();
      if (CreatorGuid != 0UL) hash ^= CreatorGuid.GetHashCode();
      if (GameCount != 0) hash ^= GameCount.GetHashCode();
      if (CreateRoomType != 0) hash ^= CreateRoomType.GetHashCode();
      if (ZhuangPosition != 0) hash ^= ZhuangPosition.GetHashCode();
      if (ZhuangCount != 0) hash ^= ZhuangCount.GetHashCode();
      if (RoomStatus != 0) hash ^= RoomStatus.GetHashCode();
      if (CurGameCount != 0) hash ^= CurGameCount.GetHashCode();
      if (QueryDisposeRoom != false) hash ^= QueryDisposeRoom.GetHashCode();
      if (TimerRest != 0) hash ^= TimerRest.GetHashCode();
      hash ^= agressPosition_.GetHashCode();
      hash ^= sitPlayerInfo_.GetHashCode();
      if (playStatusInfo_ != null) hash ^= PlayStatusInfo.GetHashCode();
      if (gameOverInfo_ != null) hash ^= GameOverInfo.GetHashCode();
      if (PlayerCount != 0) hash ^= PlayerCount.GetHashCode();
      if (PlayCount != 0) hash ^= PlayCount.GetHashCode();
      if (PlayType != 0) hash ^= PlayType.GetHashCode();
      hash ^= jiangMa_.GetHashCode();
      if (FaWangTp != false) hash ^= FaWangTp.GetHashCode();
      if (WuZhaTp != false) hash ^= WuZhaTp.GetHashCode();
      if (IsBaWang != false) hash ^= IsBaWang.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomCodeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoomCodeId);
      }
      if (CreatorGuid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(CreatorGuid);
      }
      if (GameCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GameCount);
      }
      if (CreateRoomType != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CreateRoomType);
      }
      if (ZhuangPosition != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ZhuangPosition);
      }
      if (ZhuangCount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ZhuangCount);
      }
      if (RoomStatus != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(RoomStatus);
      }
      if (CurGameCount != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(CurGameCount);
      }
      if (QueryDisposeRoom != false) {
        output.WriteRawTag(72);
        output.WriteBool(QueryDisposeRoom);
      }
      if (TimerRest != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(TimerRest);
      }
      agressPosition_.WriteTo(output, _repeated_agressPosition_codec);
      sitPlayerInfo_.WriteTo(output, _repeated_sitPlayerInfo_codec);
      if (playStatusInfo_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(PlayStatusInfo);
      }
      if (gameOverInfo_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(GameOverInfo);
      }
      if (PlayerCount != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(PlayerCount);
      }
      if (PlayCount != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(PlayCount);
      }
      if (PlayType != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(PlayType);
      }
      jiangMa_.WriteTo(output, _repeated_jiangMa_codec);
      if (FaWangTp != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(FaWangTp);
      }
      if (WuZhaTp != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(WuZhaTp);
      }
      if (IsBaWang != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsBaWang);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomCodeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomCodeId);
      }
      if (CreatorGuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreatorGuid);
      }
      if (GameCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameCount);
      }
      if (CreateRoomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateRoomType);
      }
      if (ZhuangPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ZhuangPosition);
      }
      if (ZhuangCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ZhuangCount);
      }
      if (RoomStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomStatus);
      }
      if (CurGameCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurGameCount);
      }
      if (QueryDisposeRoom != false) {
        size += 1 + 1;
      }
      if (TimerRest != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimerRest);
      }
      size += agressPosition_.CalculateSize(_repeated_agressPosition_codec);
      size += sitPlayerInfo_.CalculateSize(_repeated_sitPlayerInfo_codec);
      if (playStatusInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayStatusInfo);
      }
      if (gameOverInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameOverInfo);
      }
      if (PlayerCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerCount);
      }
      if (PlayCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PlayCount);
      }
      if (PlayType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PlayType);
      }
      size += jiangMa_.CalculateSize(_repeated_jiangMa_codec);
      if (FaWangTp != false) {
        size += 2 + 1;
      }
      if (WuZhaTp != false) {
        size += 2 + 1;
      }
      if (IsBaWang != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendRoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.RoomCodeId != 0) {
        RoomCodeId = other.RoomCodeId;
      }
      if (other.CreatorGuid != 0UL) {
        CreatorGuid = other.CreatorGuid;
      }
      if (other.GameCount != 0) {
        GameCount = other.GameCount;
      }
      if (other.CreateRoomType != 0) {
        CreateRoomType = other.CreateRoomType;
      }
      if (other.ZhuangPosition != 0) {
        ZhuangPosition = other.ZhuangPosition;
      }
      if (other.ZhuangCount != 0) {
        ZhuangCount = other.ZhuangCount;
      }
      if (other.RoomStatus != 0) {
        RoomStatus = other.RoomStatus;
      }
      if (other.CurGameCount != 0) {
        CurGameCount = other.CurGameCount;
      }
      if (other.QueryDisposeRoom != false) {
        QueryDisposeRoom = other.QueryDisposeRoom;
      }
      if (other.TimerRest != 0) {
        TimerRest = other.TimerRest;
      }
      agressPosition_.Add(other.agressPosition_);
      sitPlayerInfo_.Add(other.sitPlayerInfo_);
      if (other.playStatusInfo_ != null) {
        if (playStatusInfo_ == null) {
          playStatusInfo_ = new global::S2CEntity.PlayStatusInfo();
        }
        PlayStatusInfo.MergeFrom(other.PlayStatusInfo);
      }
      if (other.gameOverInfo_ != null) {
        if (gameOverInfo_ == null) {
          gameOverInfo_ = new global::S2CEntity.GameOverInfo();
        }
        GameOverInfo.MergeFrom(other.GameOverInfo);
      }
      if (other.PlayerCount != 0) {
        PlayerCount = other.PlayerCount;
      }
      if (other.PlayCount != 0) {
        PlayCount = other.PlayCount;
      }
      if (other.PlayType != 0) {
        PlayType = other.PlayType;
      }
      jiangMa_.Add(other.jiangMa_);
      if (other.FaWangTp != false) {
        FaWangTp = other.FaWangTp;
      }
      if (other.WuZhaTp != false) {
        WuZhaTp = other.WuZhaTp;
      }
      if (other.IsBaWang != false) {
        IsBaWang = other.IsBaWang;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomCodeId = input.ReadUInt32();
            break;
          }
          case 16: {
            CreatorGuid = input.ReadUInt64();
            break;
          }
          case 24: {
            GameCount = input.ReadUInt32();
            break;
          }
          case 32: {
            CreateRoomType = input.ReadUInt32();
            break;
          }
          case 40: {
            ZhuangPosition = input.ReadUInt32();
            break;
          }
          case 48: {
            ZhuangCount = input.ReadUInt32();
            break;
          }
          case 56: {
            RoomStatus = input.ReadUInt32();
            break;
          }
          case 64: {
            CurGameCount = input.ReadUInt32();
            break;
          }
          case 72: {
            QueryDisposeRoom = input.ReadBool();
            break;
          }
          case 80: {
            TimerRest = input.ReadUInt32();
            break;
          }
          case 90:
          case 88: {
            agressPosition_.AddEntriesFrom(input, _repeated_agressPosition_codec);
            break;
          }
          case 98: {
            sitPlayerInfo_.AddEntriesFrom(input, _repeated_sitPlayerInfo_codec);
            break;
          }
          case 106: {
            if (playStatusInfo_ == null) {
              playStatusInfo_ = new global::S2CEntity.PlayStatusInfo();
            }
            input.ReadMessage(playStatusInfo_);
            break;
          }
          case 114: {
            if (gameOverInfo_ == null) {
              gameOverInfo_ = new global::S2CEntity.GameOverInfo();
            }
            input.ReadMessage(gameOverInfo_);
            break;
          }
          case 120: {
            PlayerCount = input.ReadUInt32();
            break;
          }
          case 128: {
            PlayCount = input.ReadUInt32();
            break;
          }
          case 136: {
            PlayType = input.ReadUInt32();
            break;
          }
          case 146:
          case 144: {
            jiangMa_.AddEntriesFrom(input, _repeated_jiangMa_codec);
            break;
          }
          case 152: {
            FaWangTp = input.ReadBool();
            break;
          }
          case 160: {
            WuZhaTp = input.ReadBool();
            break;
          }
          case 168: {
            IsBaWang = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerScoreInfo : pb::IMessage<PlayerScoreInfo> {
    private static readonly pb::MessageParser<PlayerScoreInfo> _parser = new pb::MessageParser<PlayerScoreInfo>(() => new PlayerScoreInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerScoreInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2CEntity.S2CReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerScoreInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerScoreInfo(PlayerScoreInfo other) : this() {
      guid_ = other.guid_;
      otherName_ = other.otherName_;
      headId_ = other.headId_;
      changeScore_ = other.changeScore_;
      baseScore_ = other.baseScore_;
      bombScore_ = other.bombScore_;
      faWangScore_ = other.faWangScore_;
      score_ = other.score_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerScoreInfo Clone() {
      return new PlayerScoreInfo(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    /// <summary>
    /// 玩家uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "otherName" field.</summary>
    public const int OtherNameFieldNumber = 2;
    private string otherName_ = "";
    /// <summary>
    /// 玩家昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OtherName {
      get { return otherName_; }
      set {
        otherName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headId" field.</summary>
    public const int HeadIdFieldNumber = 3;
    private string headId_ = "";
    /// <summary>
    /// 玩家头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadId {
      get { return headId_; }
      set {
        headId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "change_score" field.</summary>
    public const int ChangeScoreFieldNumber = 4;
    private int changeScore_;
    /// <summary>
    /// 改变的分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeScore {
      get { return changeScore_; }
      set {
        changeScore_ = value;
      }
    }

    /// <summary>Field number for the "base_score" field.</summary>
    public const int BaseScoreFieldNumber = 5;
    private int baseScore_;
    /// <summary>
    /// 基础分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseScore {
      get { return baseScore_; }
      set {
        baseScore_ = value;
      }
    }

    /// <summary>Field number for the "bomb_score" field.</summary>
    public const int BombScoreFieldNumber = 6;
    private int bombScore_;
    /// <summary>
    /// 炸弹分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BombScore {
      get { return bombScore_; }
      set {
        bombScore_ = value;
      }
    }

    /// <summary>Field number for the "fa_wang_score" field.</summary>
    public const int FaWangScoreFieldNumber = 7;
    private int faWangScore_;
    /// <summary>
    /// 罚王分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FaWangScore {
      get { return faWangScore_; }
      set {
        faWangScore_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 8;
    private int score_;
    /// <summary>
    /// 总分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerScoreInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerScoreInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (OtherName != other.OtherName) return false;
      if (HeadId != other.HeadId) return false;
      if (ChangeScore != other.ChangeScore) return false;
      if (BaseScore != other.BaseScore) return false;
      if (BombScore != other.BombScore) return false;
      if (FaWangScore != other.FaWangScore) return false;
      if (Score != other.Score) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (OtherName.Length != 0) hash ^= OtherName.GetHashCode();
      if (HeadId.Length != 0) hash ^= HeadId.GetHashCode();
      if (ChangeScore != 0) hash ^= ChangeScore.GetHashCode();
      if (BaseScore != 0) hash ^= BaseScore.GetHashCode();
      if (BombScore != 0) hash ^= BombScore.GetHashCode();
      if (FaWangScore != 0) hash ^= FaWangScore.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (OtherName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OtherName);
      }
      if (HeadId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HeadId);
      }
      if (ChangeScore != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ChangeScore);
      }
      if (BaseScore != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BaseScore);
      }
      if (BombScore != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BombScore);
      }
      if (FaWangScore != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FaWangScore);
      }
      if (Score != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (OtherName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OtherName);
      }
      if (HeadId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadId);
      }
      if (ChangeScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeScore);
      }
      if (BaseScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseScore);
      }
      if (BombScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombScore);
      }
      if (FaWangScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaWangScore);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerScoreInfo other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.OtherName.Length != 0) {
        OtherName = other.OtherName;
      }
      if (other.HeadId.Length != 0) {
        HeadId = other.HeadId;
      }
      if (other.ChangeScore != 0) {
        ChangeScore = other.ChangeScore;
      }
      if (other.BaseScore != 0) {
        BaseScore = other.BaseScore;
      }
      if (other.BombScore != 0) {
        BombScore = other.BombScore;
      }
      if (other.FaWangScore != 0) {
        FaWangScore = other.FaWangScore;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 18: {
            OtherName = input.ReadString();
            break;
          }
          case 26: {
            HeadId = input.ReadString();
            break;
          }
          case 32: {
            ChangeScore = input.ReadInt32();
            break;
          }
          case 40: {
            BaseScore = input.ReadInt32();
            break;
          }
          case 48: {
            BombScore = input.ReadInt32();
            break;
          }
          case 56: {
            FaWangScore = input.ReadInt32();
            break;
          }
          case 64: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameRecord : pb::IMessage<GameRecord> {
    private static readonly pb::MessageParser<GameRecord> _parser = new pb::MessageParser<GameRecord>(() => new GameRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2CEntity.S2CReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRecord(GameRecord other) : this() {
      playerSocreInfo_ = other.playerSocreInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRecord Clone() {
      return new GameRecord(this);
    }

    /// <summary>Field number for the "player_socre_info" field.</summary>
    public const int PlayerSocreInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::S2CEntity.PlayerScoreInfo> _repeated_playerSocreInfo_codec
        = pb::FieldCodec.ForMessage(10, global::S2CEntity.PlayerScoreInfo.Parser);
    private readonly pbc::RepeatedField<global::S2CEntity.PlayerScoreInfo> playerSocreInfo_ = new pbc::RepeatedField<global::S2CEntity.PlayerScoreInfo>();
    /// <summary>
    /// 玩家记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::S2CEntity.PlayerScoreInfo> PlayerSocreInfo {
      get { return playerSocreInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerSocreInfo_.Equals(other.playerSocreInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerSocreInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerSocreInfo_.WriteTo(output, _repeated_playerSocreInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerSocreInfo_.CalculateSize(_repeated_playerSocreInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameRecord other) {
      if (other == null) {
        return;
      }
      playerSocreInfo_.Add(other.playerSocreInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            playerSocreInfo_.AddEntriesFrom(input, _repeated_playerSocreInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameOver : pb::IMessage<GameOver> {
    private static readonly pb::MessageParser<GameOver> _parser = new pb::MessageParser<GameOver>(() => new GameOver());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameOver> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2CEntity.S2CReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOver() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOver(GameOver other) : this() {
      roomCodeId_ = other.roomCodeId_;
      zhuangPosition_ = other.zhuangPosition_;
      friendPosition_ = other.friendPosition_;
      gameOverInfo_ = other.gameOverInfo_.Clone();
      finishInfo_ = other.finishInfo_.Clone();
      baoPaiPosition_ = other.baoPaiPosition_;
      isTp_ = other.isTp_;
      gameRecord_ = other.gameRecord_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOver Clone() {
      return new GameOver(this);
    }

    /// <summary>Field number for the "room_code_id" field.</summary>
    public const int RoomCodeIdFieldNumber = 1;
    private uint roomCodeId_;
    /// <summary>
    /// 房间号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomCodeId {
      get { return roomCodeId_; }
      set {
        roomCodeId_ = value;
      }
    }

    /// <summary>Field number for the "zhuang_position" field.</summary>
    public const int ZhuangPositionFieldNumber = 2;
    private uint zhuangPosition_;
    /// <summary>
    /// 庄的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ZhuangPosition {
      get { return zhuangPosition_; }
      set {
        zhuangPosition_ = value;
      }
    }

    /// <summary>Field number for the "friend_position" field.</summary>
    public const int FriendPositionFieldNumber = 3;
    private uint friendPosition_;
    /// <summary>
    /// 朋友的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FriendPosition {
      get { return friendPosition_; }
      set {
        friendPosition_ = value;
      }
    }

    /// <summary>Field number for the "game_over_info" field.</summary>
    public const int GameOverInfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::S2CEntity.GameOverPlayerInfo> _repeated_gameOverInfo_codec
        = pb::FieldCodec.ForMessage(34, global::S2CEntity.GameOverPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::S2CEntity.GameOverPlayerInfo> gameOverInfo_ = new pbc::RepeatedField<global::S2CEntity.GameOverPlayerInfo>();
    /// <summary>
    /// 游戏结束的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::S2CEntity.GameOverPlayerInfo> GameOverInfo {
      get { return gameOverInfo_; }
    }

    /// <summary>Field number for the "finish_info" field.</summary>
    public const int FinishInfoFieldNumber = 5;
    private static readonly pb::FieldCodec<global::S2CEntity.FinishInfo> _repeated_finishInfo_codec
        = pb::FieldCodec.ForMessage(42, global::S2CEntity.FinishInfo.Parser);
    private readonly pbc::RepeatedField<global::S2CEntity.FinishInfo> finishInfo_ = new pbc::RepeatedField<global::S2CEntity.FinishInfo>();
    /// <summary>
    /// 完成玩家的信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::S2CEntity.FinishInfo> FinishInfo {
      get { return finishInfo_; }
    }

    /// <summary>Field number for the "bao_pai_position" field.</summary>
    public const int BaoPaiPositionFieldNumber = 6;
    private uint baoPaiPosition_;
    /// <summary>
    /// 包牌人位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BaoPaiPosition {
      get { return baoPaiPosition_; }
      set {
        baoPaiPosition_ = value;
      }
    }

    /// <summary>Field number for the "is_tp" field.</summary>
    public const int IsTpFieldNumber = 7;
    private bool isTp_;
    /// <summary>
    /// 是否摊牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTp {
      get { return isTp_; }
      set {
        isTp_ = value;
      }
    }

    /// <summary>Field number for the "game_record" field.</summary>
    public const int GameRecordFieldNumber = 8;
    private static readonly pb::FieldCodec<global::S2CEntity.GameRecord> _repeated_gameRecord_codec
        = pb::FieldCodec.ForMessage(66, global::S2CEntity.GameRecord.Parser);
    private readonly pbc::RepeatedField<global::S2CEntity.GameRecord> gameRecord_ = new pbc::RepeatedField<global::S2CEntity.GameRecord>();
    /// <summary>
    /// 历史记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::S2CEntity.GameRecord> GameRecord {
      get { return gameRecord_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameOver);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameOver other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomCodeId != other.RoomCodeId) return false;
      if (ZhuangPosition != other.ZhuangPosition) return false;
      if (FriendPosition != other.FriendPosition) return false;
      if(!gameOverInfo_.Equals(other.gameOverInfo_)) return false;
      if(!finishInfo_.Equals(other.finishInfo_)) return false;
      if (BaoPaiPosition != other.BaoPaiPosition) return false;
      if (IsTp != other.IsTp) return false;
      if(!gameRecord_.Equals(other.gameRecord_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomCodeId != 0) hash ^= RoomCodeId.GetHashCode();
      if (ZhuangPosition != 0) hash ^= ZhuangPosition.GetHashCode();
      if (FriendPosition != 0) hash ^= FriendPosition.GetHashCode();
      hash ^= gameOverInfo_.GetHashCode();
      hash ^= finishInfo_.GetHashCode();
      if (BaoPaiPosition != 0) hash ^= BaoPaiPosition.GetHashCode();
      if (IsTp != false) hash ^= IsTp.GetHashCode();
      hash ^= gameRecord_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomCodeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoomCodeId);
      }
      if (ZhuangPosition != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ZhuangPosition);
      }
      if (FriendPosition != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FriendPosition);
      }
      gameOverInfo_.WriteTo(output, _repeated_gameOverInfo_codec);
      finishInfo_.WriteTo(output, _repeated_finishInfo_codec);
      if (BaoPaiPosition != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(BaoPaiPosition);
      }
      if (IsTp != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsTp);
      }
      gameRecord_.WriteTo(output, _repeated_gameRecord_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomCodeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomCodeId);
      }
      if (ZhuangPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ZhuangPosition);
      }
      if (FriendPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FriendPosition);
      }
      size += gameOverInfo_.CalculateSize(_repeated_gameOverInfo_codec);
      size += finishInfo_.CalculateSize(_repeated_finishInfo_codec);
      if (BaoPaiPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BaoPaiPosition);
      }
      if (IsTp != false) {
        size += 1 + 1;
      }
      size += gameRecord_.CalculateSize(_repeated_gameRecord_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameOver other) {
      if (other == null) {
        return;
      }
      if (other.RoomCodeId != 0) {
        RoomCodeId = other.RoomCodeId;
      }
      if (other.ZhuangPosition != 0) {
        ZhuangPosition = other.ZhuangPosition;
      }
      if (other.FriendPosition != 0) {
        FriendPosition = other.FriendPosition;
      }
      gameOverInfo_.Add(other.gameOverInfo_);
      finishInfo_.Add(other.finishInfo_);
      if (other.BaoPaiPosition != 0) {
        BaoPaiPosition = other.BaoPaiPosition;
      }
      if (other.IsTp != false) {
        IsTp = other.IsTp;
      }
      gameRecord_.Add(other.gameRecord_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomCodeId = input.ReadUInt32();
            break;
          }
          case 16: {
            ZhuangPosition = input.ReadUInt32();
            break;
          }
          case 24: {
            FriendPosition = input.ReadUInt32();
            break;
          }
          case 34: {
            gameOverInfo_.AddEntriesFrom(input, _repeated_gameOverInfo_codec);
            break;
          }
          case 42: {
            finishInfo_.AddEntriesFrom(input, _repeated_finishInfo_codec);
            break;
          }
          case 48: {
            BaoPaiPosition = input.ReadUInt32();
            break;
          }
          case 56: {
            IsTp = input.ReadBool();
            break;
          }
          case 66: {
            gameRecord_.AddEntriesFrom(input, _repeated_gameRecord_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
