// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CreateRoom.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CreateRoomEntity {

  /// <summary>Holder for reflection information generated from CreateRoom.proto</summary>
  public static partial class CreateRoomReflection {

    #region Descriptor
    /// <summary>File descriptor for CreateRoom.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CreateRoomReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBDcmVhdGVSb29tLnByb3RvEhBDcmVhdGVSb29tRW50aXR5IuQBCgpDcmVh",
            "dGVSb29tEg8KB2NsdWJfaWQYASABKA0SGgoScGxheWVyX2NvdW50X2luZGV4",
            "GAIgASgNEhgKEHBsYXlfY291bnRfaW5kZXgYAyABKA0SFwoPcGxheV90eXBl",
            "X2luZGV4GAQgASgNEhAKCGppYW5nX21hGAUgAygNEhIKCmZhX3dhbmdfdHAY",
            "BiABKAgSEQoJd3VfemhhX3RwGAcgASgIEgsKA3BveBgIIAEoARILCgNwb3kY",
            "CSABKAESDwoHYWRkcmVzcxgKIAEoCRISCgppc19iYV93YW5nGAsgASgIYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CreateRoomEntity.CreateRoom), global::CreateRoomEntity.CreateRoom.Parser, new[]{ "ClubId", "PlayerCountIndex", "PlayCountIndex", "PlayTypeIndex", "JiangMa", "FaWangTp", "WuZhaTp", "Pox", "Poy", "Address", "IsBaWang" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CreateRoom : pb::IMessage<CreateRoom> {
    private static readonly pb::MessageParser<CreateRoom> _parser = new pb::MessageParser<CreateRoom>(() => new CreateRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CreateRoomEntity.CreateRoomReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoom(CreateRoom other) : this() {
      clubId_ = other.clubId_;
      playerCountIndex_ = other.playerCountIndex_;
      playCountIndex_ = other.playCountIndex_;
      playTypeIndex_ = other.playTypeIndex_;
      jiangMa_ = other.jiangMa_.Clone();
      faWangTp_ = other.faWangTp_;
      wuZhaTp_ = other.wuZhaTp_;
      pox_ = other.pox_;
      poy_ = other.poy_;
      address_ = other.address_;
      isBaWang_ = other.isBaWang_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoom Clone() {
      return new CreateRoom(this);
    }

    /// <summary>Field number for the "club_id" field.</summary>
    public const int ClubIdFieldNumber = 1;
    private uint clubId_;
    /// <summary>
    /// 俱乐部id，只能俱乐部开房，个人不能开房
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClubId {
      get { return clubId_; }
      set {
        clubId_ = value;
      }
    }

    /// <summary>Field number for the "player_count_index" field.</summary>
    public const int PlayerCountIndexFieldNumber = 2;
    private uint playerCountIndex_;
    /// <summary>
    /// 房间人数下标（new int[] { 2, 4 };//人數）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerCountIndex {
      get { return playerCountIndex_; }
      set {
        playerCountIndex_ = value;
      }
    }

    /// <summary>Field number for the "play_count_index" field.</summary>
    public const int PlayCountIndexFieldNumber = 3;
    private uint playCountIndex_;
    /// <summary>
    /// 局数下标（new int[] { 5, 10 };//圈数)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayCountIndex {
      get { return playCountIndex_; }
      set {
        playCountIndex_ = value;
      }
    }

    /// <summary>Field number for the "play_type_index" field.</summary>
    public const int PlayTypeIndexFieldNumber = 4;
    private uint playTypeIndex_;
    /// <summary>
    /// 玩法下标（枚举类:PlayType)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayTypeIndex {
      get { return playTypeIndex_; }
      set {
        playTypeIndex_ = value;
      }
    }

    /// <summary>Field number for the "jiang_ma" field.</summary>
    public const int JiangMaFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_jiangMa_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> jiangMa_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 开奖（牌数，{7,11,13,14}）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> JiangMa {
      get { return jiangMa_; }
    }

    /// <summary>Field number for the "fa_wang_tp" field.</summary>
    public const int FaWangTpFieldNumber = 6;
    private bool faWangTp_;
    /// <summary>
    /// 罚王摊牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FaWangTp {
      get { return faWangTp_; }
      set {
        faWangTp_ = value;
      }
    }

    /// <summary>Field number for the "wu_zha_tp" field.</summary>
    public const int WuZhaTpFieldNumber = 7;
    private bool wuZhaTp_;
    /// <summary>
    /// 无炸摊牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WuZhaTp {
      get { return wuZhaTp_; }
      set {
        wuZhaTp_ = value;
      }
    }

    /// <summary>Field number for the "pox" field.</summary>
    public const int PoxFieldNumber = 8;
    private double pox_;
    /// <summary>
    /// 经纬度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Pox {
      get { return pox_; }
      set {
        pox_ = value;
      }
    }

    /// <summary>Field number for the "poy" field.</summary>
    public const int PoyFieldNumber = 9;
    private double poy_;
    /// <summary>
    /// 经纬度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Poy {
      get { return poy_; }
      set {
        poy_ = value;
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 10;
    private string address_ = "";
    /// <summary>
    /// 地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_ba_wang" field.</summary>
    public const int IsBaWangFieldNumber = 11;
    private bool isBaWang_;
    /// <summary>
    /// 是否是八王
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBaWang {
      get { return isBaWang_; }
      set {
        isBaWang_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClubId != other.ClubId) return false;
      if (PlayerCountIndex != other.PlayerCountIndex) return false;
      if (PlayCountIndex != other.PlayCountIndex) return false;
      if (PlayTypeIndex != other.PlayTypeIndex) return false;
      if(!jiangMa_.Equals(other.jiangMa_)) return false;
      if (FaWangTp != other.FaWangTp) return false;
      if (WuZhaTp != other.WuZhaTp) return false;
      if (Pox != other.Pox) return false;
      if (Poy != other.Poy) return false;
      if (Address != other.Address) return false;
      if (IsBaWang != other.IsBaWang) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClubId != 0) hash ^= ClubId.GetHashCode();
      if (PlayerCountIndex != 0) hash ^= PlayerCountIndex.GetHashCode();
      if (PlayCountIndex != 0) hash ^= PlayCountIndex.GetHashCode();
      if (PlayTypeIndex != 0) hash ^= PlayTypeIndex.GetHashCode();
      hash ^= jiangMa_.GetHashCode();
      if (FaWangTp != false) hash ^= FaWangTp.GetHashCode();
      if (WuZhaTp != false) hash ^= WuZhaTp.GetHashCode();
      if (Pox != 0D) hash ^= Pox.GetHashCode();
      if (Poy != 0D) hash ^= Poy.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (IsBaWang != false) hash ^= IsBaWang.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClubId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ClubId);
      }
      if (PlayerCountIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlayerCountIndex);
      }
      if (PlayCountIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PlayCountIndex);
      }
      if (PlayTypeIndex != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PlayTypeIndex);
      }
      jiangMa_.WriteTo(output, _repeated_jiangMa_codec);
      if (FaWangTp != false) {
        output.WriteRawTag(48);
        output.WriteBool(FaWangTp);
      }
      if (WuZhaTp != false) {
        output.WriteRawTag(56);
        output.WriteBool(WuZhaTp);
      }
      if (Pox != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Pox);
      }
      if (Poy != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Poy);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Address);
      }
      if (IsBaWang != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsBaWang);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClubId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClubId);
      }
      if (PlayerCountIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerCountIndex);
      }
      if (PlayCountIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayCountIndex);
      }
      if (PlayTypeIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayTypeIndex);
      }
      size += jiangMa_.CalculateSize(_repeated_jiangMa_codec);
      if (FaWangTp != false) {
        size += 1 + 1;
      }
      if (WuZhaTp != false) {
        size += 1 + 1;
      }
      if (Pox != 0D) {
        size += 1 + 8;
      }
      if (Poy != 0D) {
        size += 1 + 8;
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (IsBaWang != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateRoom other) {
      if (other == null) {
        return;
      }
      if (other.ClubId != 0) {
        ClubId = other.ClubId;
      }
      if (other.PlayerCountIndex != 0) {
        PlayerCountIndex = other.PlayerCountIndex;
      }
      if (other.PlayCountIndex != 0) {
        PlayCountIndex = other.PlayCountIndex;
      }
      if (other.PlayTypeIndex != 0) {
        PlayTypeIndex = other.PlayTypeIndex;
      }
      jiangMa_.Add(other.jiangMa_);
      if (other.FaWangTp != false) {
        FaWangTp = other.FaWangTp;
      }
      if (other.WuZhaTp != false) {
        WuZhaTp = other.WuZhaTp;
      }
      if (other.Pox != 0D) {
        Pox = other.Pox;
      }
      if (other.Poy != 0D) {
        Poy = other.Poy;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.IsBaWang != false) {
        IsBaWang = other.IsBaWang;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClubId = input.ReadUInt32();
            break;
          }
          case 16: {
            PlayerCountIndex = input.ReadUInt32();
            break;
          }
          case 24: {
            PlayCountIndex = input.ReadUInt32();
            break;
          }
          case 32: {
            PlayTypeIndex = input.ReadUInt32();
            break;
          }
          case 42:
          case 40: {
            jiangMa_.AddEntriesFrom(input, _repeated_jiangMa_codec);
            break;
          }
          case 48: {
            FaWangTp = input.ReadBool();
            break;
          }
          case 56: {
            WuZhaTp = input.ReadBool();
            break;
          }
          case 65: {
            Pox = input.ReadDouble();
            break;
          }
          case 73: {
            Poy = input.ReadDouble();
            break;
          }
          case 82: {
            Address = input.ReadString();
            break;
          }
          case 88: {
            IsBaWang = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
