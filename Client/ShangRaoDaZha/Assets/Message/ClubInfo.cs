// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clubInfo.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ClubEntity {

  /// <summary>Holder for reflection information generated from clubInfo.proto</summary>
  public static partial class ClubInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for clubInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClubInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5jbHViSW5mby5wcm90bxIKQ2x1YkVudGl0eSKNAQoKQ3JlYXRlQ2x1YhIM",
            "CgRuYW1lGAEgASgJEhIKCmFkbWluX25hbWUYAiABKAkSEAoIYWRtaW5faWQY",
            "AyABKAQSEQoJYWRtaW5fdGVsGAQgASgJEhEKCWNsdWJfZ29sZBgFIAEoAxIU",
            "CgxjcmVhdGVfcG93ZXIYBiABKAgSDwoHY2x1Yl9pZBgHIAEoDSIwCgdEYXlJ",
            "bmZvEhYKDmNsdWJfcm9vbV90eXBlGAEgASgNEg0KBWNvdW50GAIgASgNIj4K",
            "D0FwcGxpY2F0ZVBsYXllchIMCgRuYW1lGAEgASgJEgwKBGd1aWQYAiABKAQS",
            "DwoHaGVhZF9pcBgDIAEoCSLYAgoMU2F2ZUNsdWJJbmZvEg8KB2NvZGVfaWQY",
            "ASABKA0SDAoEbmFtZRgCIAEoCRISCgphZG1pbl9uYW1lGAMgASgJEhAKCGFk",
            "bWluX2lkGAQgASgEEhEKCWFkbWluX3RlbBgFIAEoCRIRCgljbHViX2dvbGQY",
            "BiABKAMSEwoLcGxheWVyX2d1aWQYByADKAQSMAoLcGxheWVyX2xpc3QYCCAD",
            "KAsyGy5DbHViRW50aXR5LkFwcGxpY2F0ZVBsYXllchI1ChBhcHBsaWNhdGlv",
            "bl9saXN0GAkgAygLMhsuQ2x1YkVudGl0eS5BcHBsaWNhdGVQbGF5ZXISFAoM",
            "Y3JlYXRlX3Bvd2VyGAogASgNEi8KCmFkbWluX2xpc3QYCyADKAsyGy5DbHVi",
            "RW50aXR5LkFwcGxpY2F0ZVBsYXllchIYChBoYXNfY3JlYXRlX3Bvd2VyGAwg",
            "ASgIIj8KC1NhdmVBbGxDbHViEjAKDnNhdmVfY2x1Yl9pbmZvGAEgAygLMhgu",
            "Q2x1YkVudGl0eS5TYXZlQ2x1YkluZm9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ClubEntity.CreateClub), global::ClubEntity.CreateClub.Parser, new[]{ "Name", "AdminName", "AdminId", "AdminTel", "ClubGold", "CreatePower", "ClubId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClubEntity.DayInfo), global::ClubEntity.DayInfo.Parser, new[]{ "ClubRoomType", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClubEntity.ApplicatePlayer), global::ClubEntity.ApplicatePlayer.Parser, new[]{ "Name", "Guid", "HeadIp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClubEntity.SaveClubInfo), global::ClubEntity.SaveClubInfo.Parser, new[]{ "CodeId", "Name", "AdminName", "AdminId", "AdminTel", "ClubGold", "PlayerGuid", "PlayerList", "ApplicationList", "CreatePower", "AdminList", "HasCreatePower" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClubEntity.SaveAllClub), global::ClubEntity.SaveAllClub.Parser, new[]{ "SaveClubInfo" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CreateClub : pb::IMessage<CreateClub> {
    private static readonly pb::MessageParser<CreateClub> _parser = new pb::MessageParser<CreateClub>(() => new CreateClub());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateClub> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClubEntity.ClubInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClub() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClub(CreateClub other) : this() {
      name_ = other.name_;
      adminName_ = other.adminName_;
      adminId_ = other.adminId_;
      adminTel_ = other.adminTel_;
      clubGold_ = other.clubGold_;
      createPower_ = other.createPower_;
      clubId_ = other.clubId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClub Clone() {
      return new CreateClub(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 俱乐部名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "admin_name" field.</summary>
    public const int AdminNameFieldNumber = 2;
    private string adminName_ = "";
    /// <summary>
    /// 管理员名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdminName {
      get { return adminName_; }
      set {
        adminName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "admin_id" field.</summary>
    public const int AdminIdFieldNumber = 3;
    private ulong adminId_;
    /// <summary>
    /// 管理员id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AdminId {
      get { return adminId_; }
      set {
        adminId_ = value;
      }
    }

    /// <summary>Field number for the "admin_tel" field.</summary>
    public const int AdminTelFieldNumber = 4;
    private string adminTel_ = "";
    /// <summary>
    /// 管理员电话
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdminTel {
      get { return adminTel_; }
      set {
        adminTel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "club_gold" field.</summary>
    public const int ClubGoldFieldNumber = 5;
    private long clubGold_;
    /// <summary>
    /// 俱乐部资金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClubGold {
      get { return clubGold_; }
      set {
        clubGold_ = value;
      }
    }

    /// <summary>Field number for the "create_power" field.</summary>
    public const int CreatePowerFieldNumber = 6;
    private bool createPower_;
    /// <summary>
    /// 是否有开放权限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CreatePower {
      get { return createPower_; }
      set {
        createPower_ = value;
      }
    }

    /// <summary>Field number for the "club_id" field.</summary>
    public const int ClubIdFieldNumber = 7;
    private uint clubId_;
    /// <summary>
    /// 俱乐部id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClubId {
      get { return clubId_; }
      set {
        clubId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateClub);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateClub other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (AdminName != other.AdminName) return false;
      if (AdminId != other.AdminId) return false;
      if (AdminTel != other.AdminTel) return false;
      if (ClubGold != other.ClubGold) return false;
      if (CreatePower != other.CreatePower) return false;
      if (ClubId != other.ClubId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (AdminName.Length != 0) hash ^= AdminName.GetHashCode();
      if (AdminId != 0UL) hash ^= AdminId.GetHashCode();
      if (AdminTel.Length != 0) hash ^= AdminTel.GetHashCode();
      if (ClubGold != 0L) hash ^= ClubGold.GetHashCode();
      if (CreatePower != false) hash ^= CreatePower.GetHashCode();
      if (ClubId != 0) hash ^= ClubId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (AdminName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AdminName);
      }
      if (AdminId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(AdminId);
      }
      if (AdminTel.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AdminTel);
      }
      if (ClubGold != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ClubGold);
      }
      if (CreatePower != false) {
        output.WriteRawTag(48);
        output.WriteBool(CreatePower);
      }
      if (ClubId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ClubId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (AdminName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AdminName);
      }
      if (AdminId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AdminId);
      }
      if (AdminTel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AdminTel);
      }
      if (ClubGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClubGold);
      }
      if (CreatePower != false) {
        size += 1 + 1;
      }
      if (ClubId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClubId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateClub other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.AdminName.Length != 0) {
        AdminName = other.AdminName;
      }
      if (other.AdminId != 0UL) {
        AdminId = other.AdminId;
      }
      if (other.AdminTel.Length != 0) {
        AdminTel = other.AdminTel;
      }
      if (other.ClubGold != 0L) {
        ClubGold = other.ClubGold;
      }
      if (other.CreatePower != false) {
        CreatePower = other.CreatePower;
      }
      if (other.ClubId != 0) {
        ClubId = other.ClubId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            AdminName = input.ReadString();
            break;
          }
          case 24: {
            AdminId = input.ReadUInt64();
            break;
          }
          case 34: {
            AdminTel = input.ReadString();
            break;
          }
          case 40: {
            ClubGold = input.ReadInt64();
            break;
          }
          case 48: {
            CreatePower = input.ReadBool();
            break;
          }
          case 56: {
            ClubId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DayInfo : pb::IMessage<DayInfo> {
    private static readonly pb::MessageParser<DayInfo> _parser = new pb::MessageParser<DayInfo>(() => new DayInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DayInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClubEntity.ClubInfoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DayInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DayInfo(DayInfo other) : this() {
      clubRoomType_ = other.clubRoomType_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DayInfo Clone() {
      return new DayInfo(this);
    }

    /// <summary>Field number for the "club_room_type" field.</summary>
    public const int ClubRoomTypeFieldNumber = 1;
    private uint clubRoomType_;
    /// <summary>
    /// 俱乐部房间类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClubRoomType {
      get { return clubRoomType_; }
      set {
        clubRoomType_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    /// <summary>
    /// 该类型房间开房数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DayInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DayInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClubRoomType != other.ClubRoomType) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClubRoomType != 0) hash ^= ClubRoomType.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClubRoomType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ClubRoomType);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClubRoomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClubRoomType);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DayInfo other) {
      if (other == null) {
        return;
      }
      if (other.ClubRoomType != 0) {
        ClubRoomType = other.ClubRoomType;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClubRoomType = input.ReadUInt32();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApplicatePlayer : pb::IMessage<ApplicatePlayer> {
    private static readonly pb::MessageParser<ApplicatePlayer> _parser = new pb::MessageParser<ApplicatePlayer>(() => new ApplicatePlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicatePlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClubEntity.ClubInfoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicatePlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicatePlayer(ApplicatePlayer other) : this() {
      name_ = other.name_;
      guid_ = other.guid_;
      headIp_ = other.headIp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicatePlayer Clone() {
      return new ApplicatePlayer(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 玩家名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "head_ip" field.</summary>
    public const int HeadIpFieldNumber = 3;
    private string headIp_ = "";
    /// <summary>
    /// 玩家头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadIp {
      get { return headIp_; }
      set {
        headIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicatePlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicatePlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Guid != other.Guid) return false;
      if (HeadIp != other.HeadIp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (HeadIp.Length != 0) hash ^= HeadIp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (HeadIp.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HeadIp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (HeadIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadIp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicatePlayer other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.HeadIp.Length != 0) {
        HeadIp = other.HeadIp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 26: {
            HeadIp = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SaveClubInfo : pb::IMessage<SaveClubInfo> {
    private static readonly pb::MessageParser<SaveClubInfo> _parser = new pb::MessageParser<SaveClubInfo>(() => new SaveClubInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SaveClubInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClubEntity.ClubInfoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveClubInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveClubInfo(SaveClubInfo other) : this() {
      codeId_ = other.codeId_;
      name_ = other.name_;
      adminName_ = other.adminName_;
      adminId_ = other.adminId_;
      adminTel_ = other.adminTel_;
      clubGold_ = other.clubGold_;
      playerGuid_ = other.playerGuid_.Clone();
      playerList_ = other.playerList_.Clone();
      applicationList_ = other.applicationList_.Clone();
      createPower_ = other.createPower_;
      adminList_ = other.adminList_.Clone();
      hasCreatePower_ = other.hasCreatePower_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveClubInfo Clone() {
      return new SaveClubInfo(this);
    }

    /// <summary>Field number for the "code_id" field.</summary>
    public const int CodeIdFieldNumber = 1;
    private uint codeId_;
    /// <summary>
    /// 俱乐部Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CodeId {
      get { return codeId_; }
      set {
        codeId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 俱乐部名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "admin_name" field.</summary>
    public const int AdminNameFieldNumber = 3;
    private string adminName_ = "";
    /// <summary>
    /// 管理员名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdminName {
      get { return adminName_; }
      set {
        adminName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "admin_id" field.</summary>
    public const int AdminIdFieldNumber = 4;
    private ulong adminId_;
    /// <summary>
    /// 管理员id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AdminId {
      get { return adminId_; }
      set {
        adminId_ = value;
      }
    }

    /// <summary>Field number for the "admin_tel" field.</summary>
    public const int AdminTelFieldNumber = 5;
    private string adminTel_ = "";
    /// <summary>
    /// 管理员电话
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdminTel {
      get { return adminTel_; }
      set {
        adminTel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "club_gold" field.</summary>
    public const int ClubGoldFieldNumber = 6;
    private long clubGold_;
    /// <summary>
    /// 俱乐部资金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClubGold {
      get { return clubGold_; }
      set {
        clubGold_ = value;
      }
    }

    /// <summary>Field number for the "player_guid" field.</summary>
    public const int PlayerGuidFieldNumber = 7;
    private static readonly pb::FieldCodec<ulong> _repeated_playerGuid_codec
        = pb::FieldCodec.ForUInt64(58);
    private readonly pbc::RepeatedField<ulong> playerGuid_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// 玩家guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> PlayerGuid {
      get { return playerGuid_; }
    }

    /// <summary>Field number for the "player_list" field.</summary>
    public const int PlayerListFieldNumber = 8;
    private static readonly pb::FieldCodec<global::ClubEntity.ApplicatePlayer> _repeated_playerList_codec
        = pb::FieldCodec.ForMessage(66, global::ClubEntity.ApplicatePlayer.Parser);
    private readonly pbc::RepeatedField<global::ClubEntity.ApplicatePlayer> playerList_ = new pbc::RepeatedField<global::ClubEntity.ApplicatePlayer>();
    /// <summary>
    /// repeated HistoryInfo history_info = 8;//历史记录统计
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ClubEntity.ApplicatePlayer> PlayerList {
      get { return playerList_; }
    }

    /// <summary>Field number for the "application_list" field.</summary>
    public const int ApplicationListFieldNumber = 9;
    private static readonly pb::FieldCodec<global::ClubEntity.ApplicatePlayer> _repeated_applicationList_codec
        = pb::FieldCodec.ForMessage(74, global::ClubEntity.ApplicatePlayer.Parser);
    private readonly pbc::RepeatedField<global::ClubEntity.ApplicatePlayer> applicationList_ = new pbc::RepeatedField<global::ClubEntity.ApplicatePlayer>();
    /// <summary>
    /// 申请人列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ClubEntity.ApplicatePlayer> ApplicationList {
      get { return applicationList_; }
    }

    /// <summary>Field number for the "create_power" field.</summary>
    public const int CreatePowerFieldNumber = 10;
    private uint createPower_;
    /// <summary>
    /// repeated ClubRoomConfigInfo club_room_config_info = 11;//自动开房房间配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreatePower {
      get { return createPower_; }
      set {
        createPower_ = value;
      }
    }

    /// <summary>Field number for the "admin_list" field.</summary>
    public const int AdminListFieldNumber = 11;
    private static readonly pb::FieldCodec<global::ClubEntity.ApplicatePlayer> _repeated_adminList_codec
        = pb::FieldCodec.ForMessage(90, global::ClubEntity.ApplicatePlayer.Parser);
    private readonly pbc::RepeatedField<global::ClubEntity.ApplicatePlayer> adminList_ = new pbc::RepeatedField<global::ClubEntity.ApplicatePlayer>();
    /// <summary>
    /// 管理人列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ClubEntity.ApplicatePlayer> AdminList {
      get { return adminList_; }
    }

    /// <summary>Field number for the "has_create_power" field.</summary>
    public const int HasCreatePowerFieldNumber = 12;
    private bool hasCreatePower_;
    /// <summary>
    /// 是否有开房权限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreatePower {
      get { return hasCreatePower_; }
      set {
        hasCreatePower_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SaveClubInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SaveClubInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CodeId != other.CodeId) return false;
      if (Name != other.Name) return false;
      if (AdminName != other.AdminName) return false;
      if (AdminId != other.AdminId) return false;
      if (AdminTel != other.AdminTel) return false;
      if (ClubGold != other.ClubGold) return false;
      if(!playerGuid_.Equals(other.playerGuid_)) return false;
      if(!playerList_.Equals(other.playerList_)) return false;
      if(!applicationList_.Equals(other.applicationList_)) return false;
      if (CreatePower != other.CreatePower) return false;
      if(!adminList_.Equals(other.adminList_)) return false;
      if (HasCreatePower != other.HasCreatePower) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CodeId != 0) hash ^= CodeId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (AdminName.Length != 0) hash ^= AdminName.GetHashCode();
      if (AdminId != 0UL) hash ^= AdminId.GetHashCode();
      if (AdminTel.Length != 0) hash ^= AdminTel.GetHashCode();
      if (ClubGold != 0L) hash ^= ClubGold.GetHashCode();
      hash ^= playerGuid_.GetHashCode();
      hash ^= playerList_.GetHashCode();
      hash ^= applicationList_.GetHashCode();
      if (CreatePower != 0) hash ^= CreatePower.GetHashCode();
      hash ^= adminList_.GetHashCode();
      if (HasCreatePower != false) hash ^= HasCreatePower.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CodeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CodeId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (AdminName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AdminName);
      }
      if (AdminId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(AdminId);
      }
      if (AdminTel.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AdminTel);
      }
      if (ClubGold != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ClubGold);
      }
      playerGuid_.WriteTo(output, _repeated_playerGuid_codec);
      playerList_.WriteTo(output, _repeated_playerList_codec);
      applicationList_.WriteTo(output, _repeated_applicationList_codec);
      if (CreatePower != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(CreatePower);
      }
      adminList_.WriteTo(output, _repeated_adminList_codec);
      if (HasCreatePower != false) {
        output.WriteRawTag(96);
        output.WriteBool(HasCreatePower);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CodeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CodeId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (AdminName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AdminName);
      }
      if (AdminId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AdminId);
      }
      if (AdminTel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AdminTel);
      }
      if (ClubGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClubGold);
      }
      size += playerGuid_.CalculateSize(_repeated_playerGuid_codec);
      size += playerList_.CalculateSize(_repeated_playerList_codec);
      size += applicationList_.CalculateSize(_repeated_applicationList_codec);
      if (CreatePower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreatePower);
      }
      size += adminList_.CalculateSize(_repeated_adminList_codec);
      if (HasCreatePower != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SaveClubInfo other) {
      if (other == null) {
        return;
      }
      if (other.CodeId != 0) {
        CodeId = other.CodeId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.AdminName.Length != 0) {
        AdminName = other.AdminName;
      }
      if (other.AdminId != 0UL) {
        AdminId = other.AdminId;
      }
      if (other.AdminTel.Length != 0) {
        AdminTel = other.AdminTel;
      }
      if (other.ClubGold != 0L) {
        ClubGold = other.ClubGold;
      }
      playerGuid_.Add(other.playerGuid_);
      playerList_.Add(other.playerList_);
      applicationList_.Add(other.applicationList_);
      if (other.CreatePower != 0) {
        CreatePower = other.CreatePower;
      }
      adminList_.Add(other.adminList_);
      if (other.HasCreatePower != false) {
        HasCreatePower = other.HasCreatePower;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CodeId = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            AdminName = input.ReadString();
            break;
          }
          case 32: {
            AdminId = input.ReadUInt64();
            break;
          }
          case 42: {
            AdminTel = input.ReadString();
            break;
          }
          case 48: {
            ClubGold = input.ReadInt64();
            break;
          }
          case 58:
          case 56: {
            playerGuid_.AddEntriesFrom(input, _repeated_playerGuid_codec);
            break;
          }
          case 66: {
            playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
            break;
          }
          case 74: {
            applicationList_.AddEntriesFrom(input, _repeated_applicationList_codec);
            break;
          }
          case 80: {
            CreatePower = input.ReadUInt32();
            break;
          }
          case 90: {
            adminList_.AddEntriesFrom(input, _repeated_adminList_codec);
            break;
          }
          case 96: {
            HasCreatePower = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SaveAllClub : pb::IMessage<SaveAllClub> {
    private static readonly pb::MessageParser<SaveAllClub> _parser = new pb::MessageParser<SaveAllClub>(() => new SaveAllClub());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SaveAllClub> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClubEntity.ClubInfoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveAllClub() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveAllClub(SaveAllClub other) : this() {
      saveClubInfo_ = other.saveClubInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveAllClub Clone() {
      return new SaveAllClub(this);
    }

    /// <summary>Field number for the "save_club_info" field.</summary>
    public const int SaveClubInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ClubEntity.SaveClubInfo> _repeated_saveClubInfo_codec
        = pb::FieldCodec.ForMessage(10, global::ClubEntity.SaveClubInfo.Parser);
    private readonly pbc::RepeatedField<global::ClubEntity.SaveClubInfo> saveClubInfo_ = new pbc::RepeatedField<global::ClubEntity.SaveClubInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ClubEntity.SaveClubInfo> SaveClubInfo {
      get { return saveClubInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SaveAllClub);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SaveAllClub other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!saveClubInfo_.Equals(other.saveClubInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= saveClubInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      saveClubInfo_.WriteTo(output, _repeated_saveClubInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += saveClubInfo_.CalculateSize(_repeated_saveClubInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SaveAllClub other) {
      if (other == null) {
        return;
      }
      saveClubInfo_.Add(other.saveClubInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            saveClubInfo_.AddEntriesFrom(input, _repeated_saveClubInfo_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
