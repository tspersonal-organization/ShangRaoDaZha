// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: C2S.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace C2SEntity {

  /// <summary>Holder for reflection information generated from C2S.proto</summary>
  public static partial class C2SReflection {

    #region Descriptor
    /// <summary>File descriptor for C2S.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static C2SReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglDMlMucHJvdG8SCUMyU0VudGl0eSJgCgpSb29tQ3JlYXRlEhwKFHJvb21f",
            "cGxheWNvdW50X2luZGV4GAEgASgFEhgKEHBheV9tZXRob2RfaW5kZXgYAiAB",
            "KAUSDAoEcG9zWBgDIAEoARIMCgRwb3NZGAQgASgBIhsKC09wZXJhdGVDYXJk",
            "EgwKBGNhcmQYASADKA0iWQoLT3BlcmF0ZUluZm8SDwoHY29kZV9pZBgBIAEo",
            "DRIMCgR0eXBlGAIgASgNEisKC29wZXJhdGVDYXJkGAMgAygLMhYuQzJTRW50",
            "aXR5Lk9wZXJhdGVDYXJkYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::C2SEntity.RoomCreate), global::C2SEntity.RoomCreate.Parser, new[]{ "RoomPlaycountIndex", "PayMethodIndex", "PosX", "PosY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::C2SEntity.OperateCard), global::C2SEntity.OperateCard.Parser, new[]{ "Card" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::C2SEntity.OperateInfo), global::C2SEntity.OperateInfo.Parser, new[]{ "CodeId", "Type", "OperateCard" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RoomCreate : pb::IMessage<RoomCreate> {
    private static readonly pb::MessageParser<RoomCreate> _parser = new pb::MessageParser<RoomCreate>(() => new RoomCreate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomCreate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::C2SEntity.C2SReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomCreate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomCreate(RoomCreate other) : this() {
      roomPlaycountIndex_ = other.roomPlaycountIndex_;
      payMethodIndex_ = other.payMethodIndex_;
      posX_ = other.posX_;
      posY_ = other.posY_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomCreate Clone() {
      return new RoomCreate(this);
    }

    /// <summary>Field number for the "room_playcount_index" field.</summary>
    public const int RoomPlaycountIndexFieldNumber = 1;
    private int roomPlaycountIndex_;
    /// <summary>
    /// 房间局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomPlaycountIndex {
      get { return roomPlaycountIndex_; }
      set {
        roomPlaycountIndex_ = value;
      }
    }

    /// <summary>Field number for the "pay_method_index" field.</summary>
    public const int PayMethodIndexFieldNumber = 2;
    private int payMethodIndex_;
    /// <summary>
    /// 支付方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PayMethodIndex {
      get { return payMethodIndex_; }
      set {
        payMethodIndex_ = value;
      }
    }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 3;
    private double posX_;
    /// <summary>
    /// X坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 4;
    private double posY_;
    /// <summary>
    /// X坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomCreate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomCreate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomPlaycountIndex != other.RoomPlaycountIndex) return false;
      if (PayMethodIndex != other.PayMethodIndex) return false;
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomPlaycountIndex != 0) hash ^= RoomPlaycountIndex.GetHashCode();
      if (PayMethodIndex != 0) hash ^= PayMethodIndex.GetHashCode();
      if (PosX != 0D) hash ^= PosX.GetHashCode();
      if (PosY != 0D) hash ^= PosY.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomPlaycountIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomPlaycountIndex);
      }
      if (PayMethodIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PayMethodIndex);
      }
      if (PosX != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(PosX);
      }
      if (PosY != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(PosY);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomPlaycountIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomPlaycountIndex);
      }
      if (PayMethodIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PayMethodIndex);
      }
      if (PosX != 0D) {
        size += 1 + 8;
      }
      if (PosY != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomCreate other) {
      if (other == null) {
        return;
      }
      if (other.RoomPlaycountIndex != 0) {
        RoomPlaycountIndex = other.RoomPlaycountIndex;
      }
      if (other.PayMethodIndex != 0) {
        PayMethodIndex = other.PayMethodIndex;
      }
      if (other.PosX != 0D) {
        PosX = other.PosX;
      }
      if (other.PosY != 0D) {
        PosY = other.PosY;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomPlaycountIndex = input.ReadInt32();
            break;
          }
          case 16: {
            PayMethodIndex = input.ReadInt32();
            break;
          }
          case 25: {
            PosX = input.ReadDouble();
            break;
          }
          case 33: {
            PosY = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OperateCard : pb::IMessage<OperateCard> {
    private static readonly pb::MessageParser<OperateCard> _parser = new pb::MessageParser<OperateCard>(() => new OperateCard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OperateCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::C2SEntity.C2SReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperateCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperateCard(OperateCard other) : this() {
      card_ = other.card_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperateCard Clone() {
      return new OperateCard(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_card_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> card_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Card {
      get { return card_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OperateCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OperateCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!card_.Equals(other.card_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= card_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      card_.WriteTo(output, _repeated_card_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += card_.CalculateSize(_repeated_card_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OperateCard other) {
      if (other == null) {
        return;
      }
      card_.Add(other.card_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            card_.AddEntriesFrom(input, _repeated_card_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OperateInfo : pb::IMessage<OperateInfo> {
    private static readonly pb::MessageParser<OperateInfo> _parser = new pb::MessageParser<OperateInfo>(() => new OperateInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OperateInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::C2SEntity.C2SReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperateInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperateInfo(OperateInfo other) : this() {
      codeId_ = other.codeId_;
      type_ = other.type_;
      operateCard_ = other.operateCard_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperateInfo Clone() {
      return new OperateInfo(this);
    }

    /// <summary>Field number for the "code_id" field.</summary>
    public const int CodeIdFieldNumber = 1;
    private uint codeId_;
    /// <summary>
    /// 房间编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CodeId {
      get { return codeId_; }
      set {
        codeId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private uint type_;
    /// <summary>
    /// 操作类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "operateCard" field.</summary>
    public const int OperateCardFieldNumber = 3;
    private static readonly pb::FieldCodec<global::C2SEntity.OperateCard> _repeated_operateCard_codec
        = pb::FieldCodec.ForMessage(26, global::C2SEntity.OperateCard.Parser);
    private readonly pbc::RepeatedField<global::C2SEntity.OperateCard> operateCard_ = new pbc::RepeatedField<global::C2SEntity.OperateCard>();
    /// <summary>
    /// 牌的信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::C2SEntity.OperateCard> OperateCard {
      get { return operateCard_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OperateInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OperateInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CodeId != other.CodeId) return false;
      if (Type != other.Type) return false;
      if(!operateCard_.Equals(other.operateCard_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CodeId != 0) hash ^= CodeId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= operateCard_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CodeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CodeId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Type);
      }
      operateCard_.WriteTo(output, _repeated_operateCard_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CodeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CodeId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      size += operateCard_.CalculateSize(_repeated_operateCard_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OperateInfo other) {
      if (other == null) {
        return;
      }
      if (other.CodeId != 0) {
        CodeId = other.CodeId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      operateCard_.Add(other.operateCard_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CodeId = input.ReadUInt32();
            break;
          }
          case 16: {
            Type = input.ReadUInt32();
            break;
          }
          case 26: {
            operateCard_.AddEntriesFrom(input, _repeated_operateCard_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
