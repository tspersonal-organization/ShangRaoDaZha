// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: S2DB.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace S2DBEntity {

  /// <summary>Holder for reflection information generated from S2DB.proto</summary>
  public static partial class S2DBReflection {

    #region Descriptor
    /// <summary>File descriptor for S2DB.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static S2DBReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpTMkRCLnByb3RvEgpTMkRCRW50aXR5IjsKD0RhaUxpRGF5TWlzc2lvbhIQ",
            "CghkYXRlVGltZRgBIAEoCRIWCg5jb21wZWxldGVDb3VudBgCIAEoDSJZCgpJ",
            "bnZpdGVDbHViEhIKCnBsYXllcl91aWQYASABKAQSEwoLcGxheWVyX25hbWUY",
            "AiABKAkSDwoHY2x1Yl9pZBgDIAEoDRIRCgljbHViX25hbWUYBCABKAkiuQIK",
            "CEJhc2VEYXRhEhMKC2N1cl92ZXJzaW9uGAEgASgNEgwKBG5hbWUYAiABKAkS",
            "DAoEZ29sZBgDIAEoAxIMCgRjYXJkGAQgASgDEg8KB2RpYW1vbmQYBSABKAMS",
            "DgoGaGVhZElwGAYgASgJEgsKA3NleBgHIAEoDRIRCglpc19kYWlfbGkYCCAB",
            "KAgSEgoKZGFpTGlMZXZlbBgJIAEoDRI0Cg9kYWlMaURheU1pc3Npb24YCiAD",
            "KAsyGy5TMkRCRW50aXR5LkRhaUxpRGF5TWlzc2lvbhIQCghjb21wbGV0ZRgL",
            "IAEoCBIQCghjbHViX2lkcxgMIAMoDRISCgpwbGF5X2NvdW50GA0gASgNEisK",
            "C2ludml0ZV9jbHViGA4gAygLMhYuUzJEQkVudGl0eS5JbnZpdGVDbHViIjcK",
            "EUVudGVyUm9vbVR5cGVJbmZvEhEKCXJvb21fdHlwZRgBIAEoDRIPCgdjb2Rl",
            "X2lkGAIgASgNIn4KDlNpdFBsYXllclNjb3JlEgwKBGd1aWQYASABKAQSFAoM",
            "Y2hhbmdlX3Njb3JlGAIgASgFEhIKCmJhc2Vfc2NvcmUYAyABKAUSFwoPdGFv",
            "X3NoYW5nX3Njb3JlGAQgASgFEg0KBXNjb3JlGAUgASgFEgwKBGNhcmQYBiAD",
            "KA0i1gEKEVBsYXllclJvb21SZWNvcmRzEhMKC2N1cl92ZXJzaW9uGAEgASgN",
            "EhEKCXJvb21fZ3VpZBgCIAEoBBIRCglyb29tX3R5cGUYAyABKA0SEgoKc3Rh",
            "cnRfdGltZRgEIAEoDRIQCghlbmRfdGltZRgFIAEoDRIZChFyb29tX2NyZWF0",
            "b3JfZ3VpZBgGIAEoBBI0ChBzaXRfcGxheWVyX3Njb3JlGAcgAygLMhouUzJE",
            "QkVudGl0eS5TaXRQbGF5ZXJTY29yZRIPCgdjb2RlX2lkGAggASgNIrACCg1D",
            "b21wb25lbnREYXRhEhMKC2N1cl92ZXJzaW9uGAEgASgNEkAKGWVudGVyX3Jv",
            "b21fdHlwZV9jb2RlX2luZm8YAiABKAsyHS5TMkRCRW50aXR5LkVudGVyUm9v",
            "bVR5cGVJbmZvEhkKEWNyZWF0ZV9yb29tX2NvZGVzGAMgAygNEhkKEWxhc3Rf",
            "bG90dGVyeV90aW1lGAQgASgNEjoKE3BsYXllcl9yb29tX3JlY29yZHMYBSAD",
            "KAsyHS5TMkRCRW50aXR5LlBsYXllclJvb21SZWNvcmRzEhgKEGxhc3RfYWN0",
            "aXZlX3RpbWUYBiABKA0SHAoUbGFzdF9jb3N0X21vbmV5X3RpbWUYByABKA0S",
            "HgoWZGF5X3NoYXJlX3Jld2FyZF9jb3VudBgIIAEoDSIhCgpSZWNvcmREYXRh",
            "EhMKC2N1cl92ZXJzaW9uGAEgASgNIrwCCgpDaGFyYWN0ZXJzEgwKBGd1aWQY",
            "ASABKAQSDAoEbmFtZRgCIAEoCRISCgpvdGhlcl9uYW1lGAMgASgJEg8KB2hl",
            "YWRfaXAYBCABKAkSCwoDc2V4GAUgASgNEhAKCHBhc3N3b3JkGAYgASgJEhMK",
            "C2NyZWF0ZV90aW1lGAcgASgNEicKCWJhc2VfZGF0YRgIIAEoCzIULlMyREJF",
            "bnRpdHkuQmFzZURhdGESMQoOY29tcG9uZW50X2RhdGEYCSABKAsyGS5TMkRC",
            "RW50aXR5LkNvbXBvbmVudERhdGESKwoLcmVjb3JkX2RhdGEYCiABKAsyFi5T",
            "MkRCRW50aXR5LlJlY29yZERhdGESDgoGdW5pcXVlGAsgASgEEgwKBGNvZGUY",
            "DCABKA0SEgoKc2F2ZV9pbl9kYhgNIAEoCCKPAQoUUm9vbVJlY29yZFBsYXll",
            "ckluZm8SEwoLY3VyX3ZlcnNpb24YASABKA0SEAoIcG9zaXRpb24YAiABKA0S",
            "DAoEZ3VpZBgDIAEoBBINCgVzY29yZRgEIAEoBRIaChJ0b3RhbF96aHVhbmdf",
            "Y291bnQYBSABKA0SFwoPdG90YWxfd2luX2NvdW50GAYgASgNIpQBCgtSb3Vu",
            "ZFJlY29yZBITCgtjdXJfdmVyc2lvbhgBIAEoDRISCgpzdGFydF90aW1lGAIg",
            "ASgNEhEKCW92ZXJfdGltZRgDIAEoDRITCgt6aHVhbmdfZ3VpZBgEIAEoBBI0",
            "ChBzaXRfcGxheWVyX3Njb3JlGAUgAygLMhouUzJEQkVudGl0eS5TaXRQbGF5",
            "ZXJTY29yZSJLCgpSb3VuZFZpZGVvEhMKC2N1cl92ZXJzaW9uGAEgASgNEhEK",
            "CWluaXRfZGF0YRgCIAEoDBIVCg12aWRlb19tZXNzYWdlGAMgAygMIp0ECg5S",
            "b29tUmVjb3JkRGF0YRITCgtjdXJfdmVyc2lvbhgBIAEoDRIMCgRndWlkGAIg",
            "ASgEEhMKC2NyZWF0ZV9ndWlkGAMgASgEEg8KB2NvZGVfaWQYBCABKA0SEQoJ",
            "cm9vbV90eXBlGAUgASgNEhYKDmN1cl9nYW1lX2NvdW50GAYgASgNEhMKC2Ny",
            "ZWF0ZV90aW1lGAcgASgNEhQKDGRpc3Bvc2VfdGltZRgIIAEoDRIZChFyb29t",
            "X2Rpc3Bvc2VfdHlwZRgJIAEoDRISCgpjb3N0X21vbmV5GAogASgNEhEKCWdh",
            "bWVfY291dBgLIAEoDRIXCg9jcmVhdGVfcGF5X3R5cGUYDCABKA0SQQoXcm9v",
            "bV9yZWNvcmRfcGxheWVyX2luZm8YDSADKAsyIC5TMkRCRW50aXR5LlJvb21S",
            "ZWNvcmRQbGF5ZXJJbmZvEi0KDHJvdW5kX3JlY29yZBgOIAMoCzIXLlMyREJF",
            "bnRpdHkuUm91bmRSZWNvcmQSKwoLcm91bmRfdmlkZW8YDyADKAsyFi5TMkRC",
            "RW50aXR5LlJvdW5kVmlkZW8SEQoJcGxheV90eXBlGBAgASgNEhIKCmZhX3dh",
            "bmdfdHAYESABKAgSEQoJd3VfemhhX3RwGBIgASgIEhIKCnBsYXlfY291bnQY",
            "EyABKA0SEAoIamlhbmdfbWEYFCADKA0SEgoKaXNfYmFfd2FuZxgVIAEoCCK+",
            "AQoOUm9vbVJlY29yZEluZm8SDAoEZ3VpZBgBIAEoBBIUCgxyb29tX2NvZGVf",
            "aWQYAiABKA0SEQoJcm9vbV90eXBlGAMgASgNEhQKDGNyZWF0b3JfZ3VpZBgE",
            "IAEoBBITCgtjcmVhdGVfdGltZRgFIAEoDRIUCgxkaXNwb3NlX3RpbWUYBiAB",
            "KA0SNAoQcm9vbV9yZWNvcmRfZGF0YRgHIAEoCzIaLlMyREJFbnRpdHkuUm9v",
            "bVJlY29yZERhdGEiWQoTUXVlcnlSb29tUmVjb3JkSW5mbxIMCgRndWlkGAEg",
            "ASgEEjQKEHJvb21fcmVjb3JkX2luZm8YAiABKAsyGi5TMkRCRW50aXR5LlJv",
            "b21SZWNvcmRJbmZvIocBCg1Mb2FkQ2hhcmFjdGVyEgwKBHR5cGUYASABKA0S",
            "DAoEZ3VpZBgCIAEoBBIMCgRuYW1lGAMgASgJEgwKBGNvZGUYBCABKA0SKQoJ",
            "Y2hhcmFjdGVyGAUgASgLMhYuUzJEQkVudGl0eS5DaGFyYWN0ZXJzEhMKC2No",
            "YW5nZV9nb2xkGAYgASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::S2DBEntity.DaiLiDayMission), global::S2DBEntity.DaiLiDayMission.Parser, new[]{ "DateTime", "CompeleteCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2DBEntity.InviteClub), global::S2DBEntity.InviteClub.Parser, new[]{ "PlayerUid", "PlayerName", "ClubId", "ClubName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2DBEntity.BaseData), global::S2DBEntity.BaseData.Parser, new[]{ "CurVersion", "Name", "Gold", "Card", "Diamond", "HeadIp", "Sex", "IsDaiLi", "DaiLiLevel", "DaiLiDayMission", "Complete", "ClubIds", "PlayCount", "InviteClub" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2DBEntity.EnterRoomTypeInfo), global::S2DBEntity.EnterRoomTypeInfo.Parser, new[]{ "RoomType", "CodeId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2DBEntity.SitPlayerScore), global::S2DBEntity.SitPlayerScore.Parser, new[]{ "Guid", "ChangeScore", "BaseScore", "TaoShangScore", "Score", "Card" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2DBEntity.PlayerRoomRecords), global::S2DBEntity.PlayerRoomRecords.Parser, new[]{ "CurVersion", "RoomGuid", "RoomType", "StartTime", "EndTime", "RoomCreatorGuid", "SitPlayerScore", "CodeId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2DBEntity.ComponentData), global::S2DBEntity.ComponentData.Parser, new[]{ "CurVersion", "EnterRoomTypeCodeInfo", "CreateRoomCodes", "LastLotteryTime", "PlayerRoomRecords", "LastActiveTime", "LastCostMoneyTime", "DayShareRewardCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2DBEntity.RecordData), global::S2DBEntity.RecordData.Parser, new[]{ "CurVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2DBEntity.Characters), global::S2DBEntity.Characters.Parser, new[]{ "Guid", "Name", "OtherName", "HeadIp", "Sex", "Password", "CreateTime", "BaseData", "ComponentData", "RecordData", "Unique", "Code", "SaveInDb" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2DBEntity.RoomRecordPlayerInfo), global::S2DBEntity.RoomRecordPlayerInfo.Parser, new[]{ "CurVersion", "Position", "Guid", "Score", "TotalZhuangCount", "TotalWinCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2DBEntity.RoundRecord), global::S2DBEntity.RoundRecord.Parser, new[]{ "CurVersion", "StartTime", "OverTime", "ZhuangGuid", "SitPlayerScore" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2DBEntity.RoundVideo), global::S2DBEntity.RoundVideo.Parser, new[]{ "CurVersion", "InitData", "VideoMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2DBEntity.RoomRecordData), global::S2DBEntity.RoomRecordData.Parser, new[]{ "CurVersion", "Guid", "CreateGuid", "CodeId", "RoomType", "CurGameCount", "CreateTime", "DisposeTime", "RoomDisposeType", "CostMoney", "GameCout", "CreatePayType", "RoomRecordPlayerInfo", "RoundRecord", "RoundVideo", "PlayType", "FaWangTp", "WuZhaTp", "PlayCount", "JiangMa", "IsBaWang" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2DBEntity.RoomRecordInfo), global::S2DBEntity.RoomRecordInfo.Parser, new[]{ "Guid", "RoomCodeId", "RoomType", "CreatorGuid", "CreateTime", "DisposeTime", "RoomRecordData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2DBEntity.QueryRoomRecordInfo), global::S2DBEntity.QueryRoomRecordInfo.Parser, new[]{ "Guid", "RoomRecordInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::S2DBEntity.LoadCharacter), global::S2DBEntity.LoadCharacter.Parser, new[]{ "Type", "Guid", "Name", "Code", "Character", "ChangeGold" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DaiLiDayMission : pb::IMessage<DaiLiDayMission> {
    private static readonly pb::MessageParser<DaiLiDayMission> _parser = new pb::MessageParser<DaiLiDayMission>(() => new DaiLiDayMission());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DaiLiDayMission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2DBEntity.S2DBReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DaiLiDayMission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DaiLiDayMission(DaiLiDayMission other) : this() {
      dateTime_ = other.dateTime_;
      compeleteCount_ = other.compeleteCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DaiLiDayMission Clone() {
      return new DaiLiDayMission(this);
    }

    /// <summary>Field number for the "dateTime" field.</summary>
    public const int DateTimeFieldNumber = 1;
    private string dateTime_ = "";
    /// <summary>
    /// 日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "compeleteCount" field.</summary>
    public const int CompeleteCountFieldNumber = 2;
    private uint compeleteCount_;
    /// <summary>
    /// 完成数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CompeleteCount {
      get { return compeleteCount_; }
      set {
        compeleteCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DaiLiDayMission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DaiLiDayMission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DateTime != other.DateTime) return false;
      if (CompeleteCount != other.CompeleteCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DateTime.Length != 0) hash ^= DateTime.GetHashCode();
      if (CompeleteCount != 0) hash ^= CompeleteCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DateTime.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DateTime);
      }
      if (CompeleteCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CompeleteCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DateTime);
      }
      if (CompeleteCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CompeleteCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DaiLiDayMission other) {
      if (other == null) {
        return;
      }
      if (other.DateTime.Length != 0) {
        DateTime = other.DateTime;
      }
      if (other.CompeleteCount != 0) {
        CompeleteCount = other.CompeleteCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DateTime = input.ReadString();
            break;
          }
          case 16: {
            CompeleteCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InviteClub : pb::IMessage<InviteClub> {
    private static readonly pb::MessageParser<InviteClub> _parser = new pb::MessageParser<InviteClub>(() => new InviteClub());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InviteClub> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2DBEntity.S2DBReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InviteClub() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InviteClub(InviteClub other) : this() {
      playerUid_ = other.playerUid_;
      playerName_ = other.playerName_;
      clubId_ = other.clubId_;
      clubName_ = other.clubName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InviteClub Clone() {
      return new InviteClub(this);
    }

    /// <summary>Field number for the "player_uid" field.</summary>
    public const int PlayerUidFieldNumber = 1;
    private ulong playerUid_;
    /// <summary>
    /// 邀请人id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerUid {
      get { return playerUid_; }
      set {
        playerUid_ = value;
      }
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 2;
    private string playerName_ = "";
    /// <summary>
    /// 邀请人名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "club_id" field.</summary>
    public const int ClubIdFieldNumber = 3;
    private uint clubId_;
    /// <summary>
    /// 俱乐部id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClubId {
      get { return clubId_; }
      set {
        clubId_ = value;
      }
    }

    /// <summary>Field number for the "club_name" field.</summary>
    public const int ClubNameFieldNumber = 4;
    private string clubName_ = "";
    /// <summary>
    /// 俱乐部名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClubName {
      get { return clubName_; }
      set {
        clubName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InviteClub);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InviteClub other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerUid != other.PlayerUid) return false;
      if (PlayerName != other.PlayerName) return false;
      if (ClubId != other.ClubId) return false;
      if (ClubName != other.ClubName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerUid != 0UL) hash ^= PlayerUid.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (ClubId != 0) hash ^= ClubId.GetHashCode();
      if (ClubName.Length != 0) hash ^= ClubName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerUid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerUid);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerName);
      }
      if (ClubId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ClubId);
      }
      if (ClubName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClubName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerUid);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (ClubId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClubId);
      }
      if (ClubName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClubName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InviteClub other) {
      if (other == null) {
        return;
      }
      if (other.PlayerUid != 0UL) {
        PlayerUid = other.PlayerUid;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.ClubId != 0) {
        ClubId = other.ClubId;
      }
      if (other.ClubName.Length != 0) {
        ClubName = other.ClubName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerUid = input.ReadUInt64();
            break;
          }
          case 18: {
            PlayerName = input.ReadString();
            break;
          }
          case 24: {
            ClubId = input.ReadUInt32();
            break;
          }
          case 34: {
            ClubName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BaseData : pb::IMessage<BaseData> {
    private static readonly pb::MessageParser<BaseData> _parser = new pb::MessageParser<BaseData>(() => new BaseData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BaseData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2DBEntity.S2DBReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseData(BaseData other) : this() {
      curVersion_ = other.curVersion_;
      name_ = other.name_;
      gold_ = other.gold_;
      card_ = other.card_;
      diamond_ = other.diamond_;
      headIp_ = other.headIp_;
      sex_ = other.sex_;
      isDaiLi_ = other.isDaiLi_;
      daiLiLevel_ = other.daiLiLevel_;
      daiLiDayMission_ = other.daiLiDayMission_.Clone();
      complete_ = other.complete_;
      clubIds_ = other.clubIds_.Clone();
      playCount_ = other.playCount_;
      inviteClub_ = other.inviteClub_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseData Clone() {
      return new BaseData(this);
    }

    /// <summary>Field number for the "cur_version" field.</summary>
    public const int CurVersionFieldNumber = 1;
    private uint curVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurVersion {
      get { return curVersion_; }
      set {
        curVersion_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 3;
    private long gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 4;
    private long card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int DiamondFieldNumber = 5;
    private long diamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "headIp" field.</summary>
    public const int HeadIpFieldNumber = 6;
    private string headIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadIp {
      get { return headIp_; }
      set {
        headIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 7;
    private uint sex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "is_dai_li" field.</summary>
    public const int IsDaiLiFieldNumber = 8;
    private bool isDaiLi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDaiLi {
      get { return isDaiLi_; }
      set {
        isDaiLi_ = value;
      }
    }

    /// <summary>Field number for the "daiLiLevel" field.</summary>
    public const int DaiLiLevelFieldNumber = 9;
    private uint daiLiLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DaiLiLevel {
      get { return daiLiLevel_; }
      set {
        daiLiLevel_ = value;
      }
    }

    /// <summary>Field number for the "daiLiDayMission" field.</summary>
    public const int DaiLiDayMissionFieldNumber = 10;
    private static readonly pb::FieldCodec<global::S2DBEntity.DaiLiDayMission> _repeated_daiLiDayMission_codec
        = pb::FieldCodec.ForMessage(82, global::S2DBEntity.DaiLiDayMission.Parser);
    private readonly pbc::RepeatedField<global::S2DBEntity.DaiLiDayMission> daiLiDayMission_ = new pbc::RepeatedField<global::S2DBEntity.DaiLiDayMission>();
    /// <summary>
    /// 每日完成任务数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::S2DBEntity.DaiLiDayMission> DaiLiDayMission {
      get { return daiLiDayMission_; }
    }

    /// <summary>Field number for the "complete" field.</summary>
    public const int CompleteFieldNumber = 11;
    private bool complete_;
    /// <summary>
    /// 是否完成每日任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Complete {
      get { return complete_; }
      set {
        complete_ = value;
      }
    }

    /// <summary>Field number for the "club_ids" field.</summary>
    public const int ClubIdsFieldNumber = 12;
    private static readonly pb::FieldCodec<uint> _repeated_clubIds_codec
        = pb::FieldCodec.ForUInt32(98);
    private readonly pbc::RepeatedField<uint> clubIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 俱乐部id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ClubIds {
      get { return clubIds_; }
    }

    /// <summary>Field number for the "play_count" field.</summary>
    public const int PlayCountFieldNumber = 13;
    private uint playCount_;
    /// <summary>
    /// 游玩总局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayCount {
      get { return playCount_; }
      set {
        playCount_ = value;
      }
    }

    /// <summary>Field number for the "invite_club" field.</summary>
    public const int InviteClubFieldNumber = 14;
    private static readonly pb::FieldCodec<global::S2DBEntity.InviteClub> _repeated_inviteClub_codec
        = pb::FieldCodec.ForMessage(114, global::S2DBEntity.InviteClub.Parser);
    private readonly pbc::RepeatedField<global::S2DBEntity.InviteClub> inviteClub_ = new pbc::RepeatedField<global::S2DBEntity.InviteClub>();
    /// <summary>
    /// 邀请的俱乐部
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::S2DBEntity.InviteClub> InviteClub {
      get { return inviteClub_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BaseData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BaseData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurVersion != other.CurVersion) return false;
      if (Name != other.Name) return false;
      if (Gold != other.Gold) return false;
      if (Card != other.Card) return false;
      if (Diamond != other.Diamond) return false;
      if (HeadIp != other.HeadIp) return false;
      if (Sex != other.Sex) return false;
      if (IsDaiLi != other.IsDaiLi) return false;
      if (DaiLiLevel != other.DaiLiLevel) return false;
      if(!daiLiDayMission_.Equals(other.daiLiDayMission_)) return false;
      if (Complete != other.Complete) return false;
      if(!clubIds_.Equals(other.clubIds_)) return false;
      if (PlayCount != other.PlayCount) return false;
      if(!inviteClub_.Equals(other.inviteClub_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurVersion != 0) hash ^= CurVersion.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Gold != 0L) hash ^= Gold.GetHashCode();
      if (Card != 0L) hash ^= Card.GetHashCode();
      if (Diamond != 0L) hash ^= Diamond.GetHashCode();
      if (HeadIp.Length != 0) hash ^= HeadIp.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (IsDaiLi != false) hash ^= IsDaiLi.GetHashCode();
      if (DaiLiLevel != 0) hash ^= DaiLiLevel.GetHashCode();
      hash ^= daiLiDayMission_.GetHashCode();
      if (Complete != false) hash ^= Complete.GetHashCode();
      hash ^= clubIds_.GetHashCode();
      if (PlayCount != 0) hash ^= PlayCount.GetHashCode();
      hash ^= inviteClub_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurVersion != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurVersion);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Gold != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Gold);
      }
      if (Card != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Card);
      }
      if (Diamond != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Diamond);
      }
      if (HeadIp.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(HeadIp);
      }
      if (Sex != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Sex);
      }
      if (IsDaiLi != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsDaiLi);
      }
      if (DaiLiLevel != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(DaiLiLevel);
      }
      daiLiDayMission_.WriteTo(output, _repeated_daiLiDayMission_codec);
      if (Complete != false) {
        output.WriteRawTag(88);
        output.WriteBool(Complete);
      }
      clubIds_.WriteTo(output, _repeated_clubIds_codec);
      if (PlayCount != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(PlayCount);
      }
      inviteClub_.WriteTo(output, _repeated_inviteClub_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurVersion);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (Card != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Card);
      }
      if (Diamond != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Diamond);
      }
      if (HeadIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadIp);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sex);
      }
      if (IsDaiLi != false) {
        size += 1 + 1;
      }
      if (DaiLiLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DaiLiLevel);
      }
      size += daiLiDayMission_.CalculateSize(_repeated_daiLiDayMission_codec);
      if (Complete != false) {
        size += 1 + 1;
      }
      size += clubIds_.CalculateSize(_repeated_clubIds_codec);
      if (PlayCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayCount);
      }
      size += inviteClub_.CalculateSize(_repeated_inviteClub_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BaseData other) {
      if (other == null) {
        return;
      }
      if (other.CurVersion != 0) {
        CurVersion = other.CurVersion;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Gold != 0L) {
        Gold = other.Gold;
      }
      if (other.Card != 0L) {
        Card = other.Card;
      }
      if (other.Diamond != 0L) {
        Diamond = other.Diamond;
      }
      if (other.HeadIp.Length != 0) {
        HeadIp = other.HeadIp;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.IsDaiLi != false) {
        IsDaiLi = other.IsDaiLi;
      }
      if (other.DaiLiLevel != 0) {
        DaiLiLevel = other.DaiLiLevel;
      }
      daiLiDayMission_.Add(other.daiLiDayMission_);
      if (other.Complete != false) {
        Complete = other.Complete;
      }
      clubIds_.Add(other.clubIds_);
      if (other.PlayCount != 0) {
        PlayCount = other.PlayCount;
      }
      inviteClub_.Add(other.inviteClub_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurVersion = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Gold = input.ReadInt64();
            break;
          }
          case 32: {
            Card = input.ReadInt64();
            break;
          }
          case 40: {
            Diamond = input.ReadInt64();
            break;
          }
          case 50: {
            HeadIp = input.ReadString();
            break;
          }
          case 56: {
            Sex = input.ReadUInt32();
            break;
          }
          case 64: {
            IsDaiLi = input.ReadBool();
            break;
          }
          case 72: {
            DaiLiLevel = input.ReadUInt32();
            break;
          }
          case 82: {
            daiLiDayMission_.AddEntriesFrom(input, _repeated_daiLiDayMission_codec);
            break;
          }
          case 88: {
            Complete = input.ReadBool();
            break;
          }
          case 98:
          case 96: {
            clubIds_.AddEntriesFrom(input, _repeated_clubIds_codec);
            break;
          }
          case 104: {
            PlayCount = input.ReadUInt32();
            break;
          }
          case 114: {
            inviteClub_.AddEntriesFrom(input, _repeated_inviteClub_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterRoomTypeInfo : pb::IMessage<EnterRoomTypeInfo> {
    private static readonly pb::MessageParser<EnterRoomTypeInfo> _parser = new pb::MessageParser<EnterRoomTypeInfo>(() => new EnterRoomTypeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterRoomTypeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2DBEntity.S2DBReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoomTypeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoomTypeInfo(EnterRoomTypeInfo other) : this() {
      roomType_ = other.roomType_;
      codeId_ = other.codeId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoomTypeInfo Clone() {
      return new EnterRoomTypeInfo(this);
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 1;
    private uint roomType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    /// <summary>Field number for the "code_id" field.</summary>
    public const int CodeIdFieldNumber = 2;
    private uint codeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CodeId {
      get { return codeId_; }
      set {
        codeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterRoomTypeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterRoomTypeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomType != other.RoomType) return false;
      if (CodeId != other.CodeId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomType != 0) hash ^= RoomType.GetHashCode();
      if (CodeId != 0) hash ^= CodeId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoomType);
      }
      if (CodeId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CodeId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomType);
      }
      if (CodeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CodeId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterRoomTypeInfo other) {
      if (other == null) {
        return;
      }
      if (other.RoomType != 0) {
        RoomType = other.RoomType;
      }
      if (other.CodeId != 0) {
        CodeId = other.CodeId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomType = input.ReadUInt32();
            break;
          }
          case 16: {
            CodeId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SitPlayerScore : pb::IMessage<SitPlayerScore> {
    private static readonly pb::MessageParser<SitPlayerScore> _parser = new pb::MessageParser<SitPlayerScore>(() => new SitPlayerScore());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SitPlayerScore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2DBEntity.S2DBReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SitPlayerScore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SitPlayerScore(SitPlayerScore other) : this() {
      guid_ = other.guid_;
      changeScore_ = other.changeScore_;
      baseScore_ = other.baseScore_;
      taoShangScore_ = other.taoShangScore_;
      score_ = other.score_;
      card_ = other.card_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SitPlayerScore Clone() {
      return new SitPlayerScore(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "change_score" field.</summary>
    public const int ChangeScoreFieldNumber = 2;
    private int changeScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeScore {
      get { return changeScore_; }
      set {
        changeScore_ = value;
      }
    }

    /// <summary>Field number for the "base_score" field.</summary>
    public const int BaseScoreFieldNumber = 3;
    private int baseScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseScore {
      get { return baseScore_; }
      set {
        baseScore_ = value;
      }
    }

    /// <summary>Field number for the "tao_shang_score" field.</summary>
    public const int TaoShangScoreFieldNumber = 4;
    private int taoShangScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaoShangScore {
      get { return taoShangScore_; }
      set {
        taoShangScore_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 5;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_card_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> card_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Card {
      get { return card_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SitPlayerScore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SitPlayerScore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (ChangeScore != other.ChangeScore) return false;
      if (BaseScore != other.BaseScore) return false;
      if (TaoShangScore != other.TaoShangScore) return false;
      if (Score != other.Score) return false;
      if(!card_.Equals(other.card_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (ChangeScore != 0) hash ^= ChangeScore.GetHashCode();
      if (BaseScore != 0) hash ^= BaseScore.GetHashCode();
      if (TaoShangScore != 0) hash ^= TaoShangScore.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      hash ^= card_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (ChangeScore != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChangeScore);
      }
      if (BaseScore != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BaseScore);
      }
      if (TaoShangScore != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TaoShangScore);
      }
      if (Score != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Score);
      }
      card_.WriteTo(output, _repeated_card_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (ChangeScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeScore);
      }
      if (BaseScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseScore);
      }
      if (TaoShangScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaoShangScore);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      size += card_.CalculateSize(_repeated_card_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SitPlayerScore other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.ChangeScore != 0) {
        ChangeScore = other.ChangeScore;
      }
      if (other.BaseScore != 0) {
        BaseScore = other.BaseScore;
      }
      if (other.TaoShangScore != 0) {
        TaoShangScore = other.TaoShangScore;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      card_.Add(other.card_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 16: {
            ChangeScore = input.ReadInt32();
            break;
          }
          case 24: {
            BaseScore = input.ReadInt32();
            break;
          }
          case 32: {
            TaoShangScore = input.ReadInt32();
            break;
          }
          case 40: {
            Score = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            card_.AddEntriesFrom(input, _repeated_card_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerRoomRecords : pb::IMessage<PlayerRoomRecords> {
    private static readonly pb::MessageParser<PlayerRoomRecords> _parser = new pb::MessageParser<PlayerRoomRecords>(() => new PlayerRoomRecords());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRoomRecords> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2DBEntity.S2DBReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRoomRecords() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRoomRecords(PlayerRoomRecords other) : this() {
      curVersion_ = other.curVersion_;
      roomGuid_ = other.roomGuid_;
      roomType_ = other.roomType_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      roomCreatorGuid_ = other.roomCreatorGuid_;
      sitPlayerScore_ = other.sitPlayerScore_.Clone();
      codeId_ = other.codeId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRoomRecords Clone() {
      return new PlayerRoomRecords(this);
    }

    /// <summary>Field number for the "cur_version" field.</summary>
    public const int CurVersionFieldNumber = 1;
    private uint curVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurVersion {
      get { return curVersion_; }
      set {
        curVersion_ = value;
      }
    }

    /// <summary>Field number for the "room_guid" field.</summary>
    public const int RoomGuidFieldNumber = 2;
    private ulong roomGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomGuid {
      get { return roomGuid_; }
      set {
        roomGuid_ = value;
      }
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 3;
    private uint roomType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 4;
    private uint startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 5;
    private uint endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "room_creator_guid" field.</summary>
    public const int RoomCreatorGuidFieldNumber = 6;
    private ulong roomCreatorGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomCreatorGuid {
      get { return roomCreatorGuid_; }
      set {
        roomCreatorGuid_ = value;
      }
    }

    /// <summary>Field number for the "sit_player_score" field.</summary>
    public const int SitPlayerScoreFieldNumber = 7;
    private static readonly pb::FieldCodec<global::S2DBEntity.SitPlayerScore> _repeated_sitPlayerScore_codec
        = pb::FieldCodec.ForMessage(58, global::S2DBEntity.SitPlayerScore.Parser);
    private readonly pbc::RepeatedField<global::S2DBEntity.SitPlayerScore> sitPlayerScore_ = new pbc::RepeatedField<global::S2DBEntity.SitPlayerScore>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::S2DBEntity.SitPlayerScore> SitPlayerScore {
      get { return sitPlayerScore_; }
    }

    /// <summary>Field number for the "code_id" field.</summary>
    public const int CodeIdFieldNumber = 8;
    private uint codeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CodeId {
      get { return codeId_; }
      set {
        codeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRoomRecords);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRoomRecords other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurVersion != other.CurVersion) return false;
      if (RoomGuid != other.RoomGuid) return false;
      if (RoomType != other.RoomType) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (RoomCreatorGuid != other.RoomCreatorGuid) return false;
      if(!sitPlayerScore_.Equals(other.sitPlayerScore_)) return false;
      if (CodeId != other.CodeId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurVersion != 0) hash ^= CurVersion.GetHashCode();
      if (RoomGuid != 0UL) hash ^= RoomGuid.GetHashCode();
      if (RoomType != 0) hash ^= RoomType.GetHashCode();
      if (StartTime != 0) hash ^= StartTime.GetHashCode();
      if (EndTime != 0) hash ^= EndTime.GetHashCode();
      if (RoomCreatorGuid != 0UL) hash ^= RoomCreatorGuid.GetHashCode();
      hash ^= sitPlayerScore_.GetHashCode();
      if (CodeId != 0) hash ^= CodeId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurVersion != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurVersion);
      }
      if (RoomGuid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoomGuid);
      }
      if (RoomType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RoomType);
      }
      if (StartTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(StartTime);
      }
      if (EndTime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(EndTime);
      }
      if (RoomCreatorGuid != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(RoomCreatorGuid);
      }
      sitPlayerScore_.WriteTo(output, _repeated_sitPlayerScore_codec);
      if (CodeId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(CodeId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurVersion);
      }
      if (RoomGuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomGuid);
      }
      if (RoomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomType);
      }
      if (StartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      if (RoomCreatorGuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomCreatorGuid);
      }
      size += sitPlayerScore_.CalculateSize(_repeated_sitPlayerScore_codec);
      if (CodeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CodeId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRoomRecords other) {
      if (other == null) {
        return;
      }
      if (other.CurVersion != 0) {
        CurVersion = other.CurVersion;
      }
      if (other.RoomGuid != 0UL) {
        RoomGuid = other.RoomGuid;
      }
      if (other.RoomType != 0) {
        RoomType = other.RoomType;
      }
      if (other.StartTime != 0) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0) {
        EndTime = other.EndTime;
      }
      if (other.RoomCreatorGuid != 0UL) {
        RoomCreatorGuid = other.RoomCreatorGuid;
      }
      sitPlayerScore_.Add(other.sitPlayerScore_);
      if (other.CodeId != 0) {
        CodeId = other.CodeId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurVersion = input.ReadUInt32();
            break;
          }
          case 16: {
            RoomGuid = input.ReadUInt64();
            break;
          }
          case 24: {
            RoomType = input.ReadUInt32();
            break;
          }
          case 32: {
            StartTime = input.ReadUInt32();
            break;
          }
          case 40: {
            EndTime = input.ReadUInt32();
            break;
          }
          case 48: {
            RoomCreatorGuid = input.ReadUInt64();
            break;
          }
          case 58: {
            sitPlayerScore_.AddEntriesFrom(input, _repeated_sitPlayerScore_codec);
            break;
          }
          case 64: {
            CodeId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ComponentData : pb::IMessage<ComponentData> {
    private static readonly pb::MessageParser<ComponentData> _parser = new pb::MessageParser<ComponentData>(() => new ComponentData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComponentData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2DBEntity.S2DBReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComponentData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComponentData(ComponentData other) : this() {
      curVersion_ = other.curVersion_;
      EnterRoomTypeCodeInfo = other.enterRoomTypeCodeInfo_ != null ? other.EnterRoomTypeCodeInfo.Clone() : null;
      createRoomCodes_ = other.createRoomCodes_.Clone();
      lastLotteryTime_ = other.lastLotteryTime_;
      playerRoomRecords_ = other.playerRoomRecords_.Clone();
      lastActiveTime_ = other.lastActiveTime_;
      lastCostMoneyTime_ = other.lastCostMoneyTime_;
      dayShareRewardCount_ = other.dayShareRewardCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComponentData Clone() {
      return new ComponentData(this);
    }

    /// <summary>Field number for the "cur_version" field.</summary>
    public const int CurVersionFieldNumber = 1;
    private uint curVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurVersion {
      get { return curVersion_; }
      set {
        curVersion_ = value;
      }
    }

    /// <summary>Field number for the "enter_room_type_code_info" field.</summary>
    public const int EnterRoomTypeCodeInfoFieldNumber = 2;
    private global::S2DBEntity.EnterRoomTypeInfo enterRoomTypeCodeInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2DBEntity.EnterRoomTypeInfo EnterRoomTypeCodeInfo {
      get { return enterRoomTypeCodeInfo_; }
      set {
        enterRoomTypeCodeInfo_ = value;
      }
    }

    /// <summary>Field number for the "create_room_codes" field.</summary>
    public const int CreateRoomCodesFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_createRoomCodes_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> createRoomCodes_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> CreateRoomCodes {
      get { return createRoomCodes_; }
    }

    /// <summary>Field number for the "last_lottery_time" field.</summary>
    public const int LastLotteryTimeFieldNumber = 4;
    private uint lastLotteryTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastLotteryTime {
      get { return lastLotteryTime_; }
      set {
        lastLotteryTime_ = value;
      }
    }

    /// <summary>Field number for the "player_room_records" field.</summary>
    public const int PlayerRoomRecordsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::S2DBEntity.PlayerRoomRecords> _repeated_playerRoomRecords_codec
        = pb::FieldCodec.ForMessage(42, global::S2DBEntity.PlayerRoomRecords.Parser);
    private readonly pbc::RepeatedField<global::S2DBEntity.PlayerRoomRecords> playerRoomRecords_ = new pbc::RepeatedField<global::S2DBEntity.PlayerRoomRecords>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::S2DBEntity.PlayerRoomRecords> PlayerRoomRecords {
      get { return playerRoomRecords_; }
    }

    /// <summary>Field number for the "last_active_time" field.</summary>
    public const int LastActiveTimeFieldNumber = 6;
    private uint lastActiveTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastActiveTime {
      get { return lastActiveTime_; }
      set {
        lastActiveTime_ = value;
      }
    }

    /// <summary>Field number for the "last_cost_money_time" field.</summary>
    public const int LastCostMoneyTimeFieldNumber = 7;
    private uint lastCostMoneyTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastCostMoneyTime {
      get { return lastCostMoneyTime_; }
      set {
        lastCostMoneyTime_ = value;
      }
    }

    /// <summary>Field number for the "day_share_reward_count" field.</summary>
    public const int DayShareRewardCountFieldNumber = 8;
    private uint dayShareRewardCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DayShareRewardCount {
      get { return dayShareRewardCount_; }
      set {
        dayShareRewardCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComponentData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComponentData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurVersion != other.CurVersion) return false;
      if (!object.Equals(EnterRoomTypeCodeInfo, other.EnterRoomTypeCodeInfo)) return false;
      if(!createRoomCodes_.Equals(other.createRoomCodes_)) return false;
      if (LastLotteryTime != other.LastLotteryTime) return false;
      if(!playerRoomRecords_.Equals(other.playerRoomRecords_)) return false;
      if (LastActiveTime != other.LastActiveTime) return false;
      if (LastCostMoneyTime != other.LastCostMoneyTime) return false;
      if (DayShareRewardCount != other.DayShareRewardCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurVersion != 0) hash ^= CurVersion.GetHashCode();
      if (enterRoomTypeCodeInfo_ != null) hash ^= EnterRoomTypeCodeInfo.GetHashCode();
      hash ^= createRoomCodes_.GetHashCode();
      if (LastLotteryTime != 0) hash ^= LastLotteryTime.GetHashCode();
      hash ^= playerRoomRecords_.GetHashCode();
      if (LastActiveTime != 0) hash ^= LastActiveTime.GetHashCode();
      if (LastCostMoneyTime != 0) hash ^= LastCostMoneyTime.GetHashCode();
      if (DayShareRewardCount != 0) hash ^= DayShareRewardCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurVersion != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurVersion);
      }
      if (enterRoomTypeCodeInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EnterRoomTypeCodeInfo);
      }
      createRoomCodes_.WriteTo(output, _repeated_createRoomCodes_codec);
      if (LastLotteryTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LastLotteryTime);
      }
      playerRoomRecords_.WriteTo(output, _repeated_playerRoomRecords_codec);
      if (LastActiveTime != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(LastActiveTime);
      }
      if (LastCostMoneyTime != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(LastCostMoneyTime);
      }
      if (DayShareRewardCount != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(DayShareRewardCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurVersion);
      }
      if (enterRoomTypeCodeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnterRoomTypeCodeInfo);
      }
      size += createRoomCodes_.CalculateSize(_repeated_createRoomCodes_codec);
      if (LastLotteryTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastLotteryTime);
      }
      size += playerRoomRecords_.CalculateSize(_repeated_playerRoomRecords_codec);
      if (LastActiveTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastActiveTime);
      }
      if (LastCostMoneyTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastCostMoneyTime);
      }
      if (DayShareRewardCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DayShareRewardCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComponentData other) {
      if (other == null) {
        return;
      }
      if (other.CurVersion != 0) {
        CurVersion = other.CurVersion;
      }
      if (other.enterRoomTypeCodeInfo_ != null) {
        if (enterRoomTypeCodeInfo_ == null) {
          enterRoomTypeCodeInfo_ = new global::S2DBEntity.EnterRoomTypeInfo();
        }
        EnterRoomTypeCodeInfo.MergeFrom(other.EnterRoomTypeCodeInfo);
      }
      createRoomCodes_.Add(other.createRoomCodes_);
      if (other.LastLotteryTime != 0) {
        LastLotteryTime = other.LastLotteryTime;
      }
      playerRoomRecords_.Add(other.playerRoomRecords_);
      if (other.LastActiveTime != 0) {
        LastActiveTime = other.LastActiveTime;
      }
      if (other.LastCostMoneyTime != 0) {
        LastCostMoneyTime = other.LastCostMoneyTime;
      }
      if (other.DayShareRewardCount != 0) {
        DayShareRewardCount = other.DayShareRewardCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurVersion = input.ReadUInt32();
            break;
          }
          case 18: {
            if (enterRoomTypeCodeInfo_ == null) {
              enterRoomTypeCodeInfo_ = new global::S2DBEntity.EnterRoomTypeInfo();
            }
            input.ReadMessage(enterRoomTypeCodeInfo_);
            break;
          }
          case 26:
          case 24: {
            createRoomCodes_.AddEntriesFrom(input, _repeated_createRoomCodes_codec);
            break;
          }
          case 32: {
            LastLotteryTime = input.ReadUInt32();
            break;
          }
          case 42: {
            playerRoomRecords_.AddEntriesFrom(input, _repeated_playerRoomRecords_codec);
            break;
          }
          case 48: {
            LastActiveTime = input.ReadUInt32();
            break;
          }
          case 56: {
            LastCostMoneyTime = input.ReadUInt32();
            break;
          }
          case 64: {
            DayShareRewardCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecordData : pb::IMessage<RecordData> {
    private static readonly pb::MessageParser<RecordData> _parser = new pb::MessageParser<RecordData>(() => new RecordData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2DBEntity.S2DBReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordData(RecordData other) : this() {
      curVersion_ = other.curVersion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordData Clone() {
      return new RecordData(this);
    }

    /// <summary>Field number for the "cur_version" field.</summary>
    public const int CurVersionFieldNumber = 1;
    private uint curVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurVersion {
      get { return curVersion_; }
      set {
        curVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurVersion != other.CurVersion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurVersion != 0) hash ^= CurVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurVersion != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurVersion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordData other) {
      if (other == null) {
        return;
      }
      if (other.CurVersion != 0) {
        CurVersion = other.CurVersion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurVersion = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Characters : pb::IMessage<Characters> {
    private static readonly pb::MessageParser<Characters> _parser = new pb::MessageParser<Characters>(() => new Characters());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Characters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2DBEntity.S2DBReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Characters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Characters(Characters other) : this() {
      guid_ = other.guid_;
      name_ = other.name_;
      otherName_ = other.otherName_;
      headIp_ = other.headIp_;
      sex_ = other.sex_;
      password_ = other.password_;
      createTime_ = other.createTime_;
      BaseData = other.baseData_ != null ? other.BaseData.Clone() : null;
      ComponentData = other.componentData_ != null ? other.ComponentData.Clone() : null;
      RecordData = other.recordData_ != null ? other.RecordData.Clone() : null;
      unique_ = other.unique_;
      code_ = other.code_;
      saveInDb_ = other.saveInDb_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Characters Clone() {
      return new Characters(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "other_name" field.</summary>
    public const int OtherNameFieldNumber = 3;
    private string otherName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OtherName {
      get { return otherName_; }
      set {
        otherName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "head_ip" field.</summary>
    public const int HeadIpFieldNumber = 4;
    private string headIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadIp {
      get { return headIp_; }
      set {
        headIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 5;
    private uint sex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 6;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 7;
    private uint createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "base_data" field.</summary>
    public const int BaseDataFieldNumber = 8;
    private global::S2DBEntity.BaseData baseData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2DBEntity.BaseData BaseData {
      get { return baseData_; }
      set {
        baseData_ = value;
      }
    }

    /// <summary>Field number for the "component_data" field.</summary>
    public const int ComponentDataFieldNumber = 9;
    private global::S2DBEntity.ComponentData componentData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2DBEntity.ComponentData ComponentData {
      get { return componentData_; }
      set {
        componentData_ = value;
      }
    }

    /// <summary>Field number for the "record_data" field.</summary>
    public const int RecordDataFieldNumber = 10;
    private global::S2DBEntity.RecordData recordData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2DBEntity.RecordData RecordData {
      get { return recordData_; }
      set {
        recordData_ = value;
      }
    }

    /// <summary>Field number for the "unique" field.</summary>
    public const int UniqueFieldNumber = 11;
    private ulong unique_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Unique {
      get { return unique_; }
      set {
        unique_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 12;
    private uint code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "save_in_db" field.</summary>
    public const int SaveInDbFieldNumber = 13;
    private bool saveInDb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SaveInDb {
      get { return saveInDb_; }
      set {
        saveInDb_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Characters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Characters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Name != other.Name) return false;
      if (OtherName != other.OtherName) return false;
      if (HeadIp != other.HeadIp) return false;
      if (Sex != other.Sex) return false;
      if (Password != other.Password) return false;
      if (CreateTime != other.CreateTime) return false;
      if (!object.Equals(BaseData, other.BaseData)) return false;
      if (!object.Equals(ComponentData, other.ComponentData)) return false;
      if (!object.Equals(RecordData, other.RecordData)) return false;
      if (Unique != other.Unique) return false;
      if (Code != other.Code) return false;
      if (SaveInDb != other.SaveInDb) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (OtherName.Length != 0) hash ^= OtherName.GetHashCode();
      if (HeadIp.Length != 0) hash ^= HeadIp.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (CreateTime != 0) hash ^= CreateTime.GetHashCode();
      if (baseData_ != null) hash ^= BaseData.GetHashCode();
      if (componentData_ != null) hash ^= ComponentData.GetHashCode();
      if (recordData_ != null) hash ^= RecordData.GetHashCode();
      if (Unique != 0UL) hash ^= Unique.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (SaveInDb != false) hash ^= SaveInDb.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (OtherName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OtherName);
      }
      if (HeadIp.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HeadIp);
      }
      if (Sex != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Sex);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Password);
      }
      if (CreateTime != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(CreateTime);
      }
      if (baseData_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(BaseData);
      }
      if (componentData_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ComponentData);
      }
      if (recordData_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(RecordData);
      }
      if (Unique != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(Unique);
      }
      if (Code != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Code);
      }
      if (SaveInDb != false) {
        output.WriteRawTag(104);
        output.WriteBool(SaveInDb);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (OtherName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OtherName);
      }
      if (HeadIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadIp);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sex);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (CreateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateTime);
      }
      if (baseData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseData);
      }
      if (componentData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ComponentData);
      }
      if (recordData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecordData);
      }
      if (Unique != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Unique);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
      }
      if (SaveInDb != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Characters other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.OtherName.Length != 0) {
        OtherName = other.OtherName;
      }
      if (other.HeadIp.Length != 0) {
        HeadIp = other.HeadIp;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.CreateTime != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.baseData_ != null) {
        if (baseData_ == null) {
          baseData_ = new global::S2DBEntity.BaseData();
        }
        BaseData.MergeFrom(other.BaseData);
      }
      if (other.componentData_ != null) {
        if (componentData_ == null) {
          componentData_ = new global::S2DBEntity.ComponentData();
        }
        ComponentData.MergeFrom(other.ComponentData);
      }
      if (other.recordData_ != null) {
        if (recordData_ == null) {
          recordData_ = new global::S2DBEntity.RecordData();
        }
        RecordData.MergeFrom(other.RecordData);
      }
      if (other.Unique != 0UL) {
        Unique = other.Unique;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.SaveInDb != false) {
        SaveInDb = other.SaveInDb;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            OtherName = input.ReadString();
            break;
          }
          case 34: {
            HeadIp = input.ReadString();
            break;
          }
          case 40: {
            Sex = input.ReadUInt32();
            break;
          }
          case 50: {
            Password = input.ReadString();
            break;
          }
          case 56: {
            CreateTime = input.ReadUInt32();
            break;
          }
          case 66: {
            if (baseData_ == null) {
              baseData_ = new global::S2DBEntity.BaseData();
            }
            input.ReadMessage(baseData_);
            break;
          }
          case 74: {
            if (componentData_ == null) {
              componentData_ = new global::S2DBEntity.ComponentData();
            }
            input.ReadMessage(componentData_);
            break;
          }
          case 82: {
            if (recordData_ == null) {
              recordData_ = new global::S2DBEntity.RecordData();
            }
            input.ReadMessage(recordData_);
            break;
          }
          case 88: {
            Unique = input.ReadUInt64();
            break;
          }
          case 96: {
            Code = input.ReadUInt32();
            break;
          }
          case 104: {
            SaveInDb = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomRecordPlayerInfo : pb::IMessage<RoomRecordPlayerInfo> {
    private static readonly pb::MessageParser<RoomRecordPlayerInfo> _parser = new pb::MessageParser<RoomRecordPlayerInfo>(() => new RoomRecordPlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomRecordPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2DBEntity.S2DBReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomRecordPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomRecordPlayerInfo(RoomRecordPlayerInfo other) : this() {
      curVersion_ = other.curVersion_;
      position_ = other.position_;
      guid_ = other.guid_;
      score_ = other.score_;
      totalZhuangCount_ = other.totalZhuangCount_;
      totalWinCount_ = other.totalWinCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomRecordPlayerInfo Clone() {
      return new RoomRecordPlayerInfo(this);
    }

    /// <summary>Field number for the "cur_version" field.</summary>
    public const int CurVersionFieldNumber = 1;
    private uint curVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurVersion {
      get { return curVersion_; }
      set {
        curVersion_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private uint position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 3;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 4;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "total_zhuang_count" field.</summary>
    public const int TotalZhuangCountFieldNumber = 5;
    private uint totalZhuangCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalZhuangCount {
      get { return totalZhuangCount_; }
      set {
        totalZhuangCount_ = value;
      }
    }

    /// <summary>Field number for the "total_win_count" field.</summary>
    public const int TotalWinCountFieldNumber = 6;
    private uint totalWinCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalWinCount {
      get { return totalWinCount_; }
      set {
        totalWinCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomRecordPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomRecordPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurVersion != other.CurVersion) return false;
      if (Position != other.Position) return false;
      if (Guid != other.Guid) return false;
      if (Score != other.Score) return false;
      if (TotalZhuangCount != other.TotalZhuangCount) return false;
      if (TotalWinCount != other.TotalWinCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurVersion != 0) hash ^= CurVersion.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (TotalZhuangCount != 0) hash ^= TotalZhuangCount.GetHashCode();
      if (TotalWinCount != 0) hash ^= TotalWinCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurVersion != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurVersion);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Position);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Guid);
      }
      if (Score != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Score);
      }
      if (TotalZhuangCount != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TotalZhuangCount);
      }
      if (TotalWinCount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TotalWinCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurVersion);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (TotalZhuangCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalZhuangCount);
      }
      if (TotalWinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalWinCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomRecordPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.CurVersion != 0) {
        CurVersion = other.CurVersion;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.TotalZhuangCount != 0) {
        TotalZhuangCount = other.TotalZhuangCount;
      }
      if (other.TotalWinCount != 0) {
        TotalWinCount = other.TotalWinCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurVersion = input.ReadUInt32();
            break;
          }
          case 16: {
            Position = input.ReadUInt32();
            break;
          }
          case 24: {
            Guid = input.ReadUInt64();
            break;
          }
          case 32: {
            Score = input.ReadInt32();
            break;
          }
          case 40: {
            TotalZhuangCount = input.ReadUInt32();
            break;
          }
          case 48: {
            TotalWinCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoundRecord : pb::IMessage<RoundRecord> {
    private static readonly pb::MessageParser<RoundRecord> _parser = new pb::MessageParser<RoundRecord>(() => new RoundRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoundRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2DBEntity.S2DBReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundRecord(RoundRecord other) : this() {
      curVersion_ = other.curVersion_;
      startTime_ = other.startTime_;
      overTime_ = other.overTime_;
      zhuangGuid_ = other.zhuangGuid_;
      sitPlayerScore_ = other.sitPlayerScore_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundRecord Clone() {
      return new RoundRecord(this);
    }

    /// <summary>Field number for the "cur_version" field.</summary>
    public const int CurVersionFieldNumber = 1;
    private uint curVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurVersion {
      get { return curVersion_; }
      set {
        curVersion_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private uint startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "over_time" field.</summary>
    public const int OverTimeFieldNumber = 3;
    private uint overTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OverTime {
      get { return overTime_; }
      set {
        overTime_ = value;
      }
    }

    /// <summary>Field number for the "zhuang_guid" field.</summary>
    public const int ZhuangGuidFieldNumber = 4;
    private ulong zhuangGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ZhuangGuid {
      get { return zhuangGuid_; }
      set {
        zhuangGuid_ = value;
      }
    }

    /// <summary>Field number for the "sit_player_score" field.</summary>
    public const int SitPlayerScoreFieldNumber = 5;
    private static readonly pb::FieldCodec<global::S2DBEntity.SitPlayerScore> _repeated_sitPlayerScore_codec
        = pb::FieldCodec.ForMessage(42, global::S2DBEntity.SitPlayerScore.Parser);
    private readonly pbc::RepeatedField<global::S2DBEntity.SitPlayerScore> sitPlayerScore_ = new pbc::RepeatedField<global::S2DBEntity.SitPlayerScore>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::S2DBEntity.SitPlayerScore> SitPlayerScore {
      get { return sitPlayerScore_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoundRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoundRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurVersion != other.CurVersion) return false;
      if (StartTime != other.StartTime) return false;
      if (OverTime != other.OverTime) return false;
      if (ZhuangGuid != other.ZhuangGuid) return false;
      if(!sitPlayerScore_.Equals(other.sitPlayerScore_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurVersion != 0) hash ^= CurVersion.GetHashCode();
      if (StartTime != 0) hash ^= StartTime.GetHashCode();
      if (OverTime != 0) hash ^= OverTime.GetHashCode();
      if (ZhuangGuid != 0UL) hash ^= ZhuangGuid.GetHashCode();
      hash ^= sitPlayerScore_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurVersion != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurVersion);
      }
      if (StartTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StartTime);
      }
      if (OverTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OverTime);
      }
      if (ZhuangGuid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ZhuangGuid);
      }
      sitPlayerScore_.WriteTo(output, _repeated_sitPlayerScore_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurVersion);
      }
      if (StartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime);
      }
      if (OverTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OverTime);
      }
      if (ZhuangGuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ZhuangGuid);
      }
      size += sitPlayerScore_.CalculateSize(_repeated_sitPlayerScore_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoundRecord other) {
      if (other == null) {
        return;
      }
      if (other.CurVersion != 0) {
        CurVersion = other.CurVersion;
      }
      if (other.StartTime != 0) {
        StartTime = other.StartTime;
      }
      if (other.OverTime != 0) {
        OverTime = other.OverTime;
      }
      if (other.ZhuangGuid != 0UL) {
        ZhuangGuid = other.ZhuangGuid;
      }
      sitPlayerScore_.Add(other.sitPlayerScore_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurVersion = input.ReadUInt32();
            break;
          }
          case 16: {
            StartTime = input.ReadUInt32();
            break;
          }
          case 24: {
            OverTime = input.ReadUInt32();
            break;
          }
          case 32: {
            ZhuangGuid = input.ReadUInt64();
            break;
          }
          case 42: {
            sitPlayerScore_.AddEntriesFrom(input, _repeated_sitPlayerScore_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoundVideo : pb::IMessage<RoundVideo> {
    private static readonly pb::MessageParser<RoundVideo> _parser = new pb::MessageParser<RoundVideo>(() => new RoundVideo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoundVideo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2DBEntity.S2DBReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundVideo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundVideo(RoundVideo other) : this() {
      curVersion_ = other.curVersion_;
      initData_ = other.initData_;
      videoMessage_ = other.videoMessage_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundVideo Clone() {
      return new RoundVideo(this);
    }

    /// <summary>Field number for the "cur_version" field.</summary>
    public const int CurVersionFieldNumber = 1;
    private uint curVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurVersion {
      get { return curVersion_; }
      set {
        curVersion_ = value;
      }
    }

    /// <summary>Field number for the "init_data" field.</summary>
    public const int InitDataFieldNumber = 2;
    private pb::ByteString initData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString InitData {
      get { return initData_; }
      set {
        initData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "video_message" field.</summary>
    public const int VideoMessageFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_videoMessage_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> videoMessage_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> VideoMessage {
      get { return videoMessage_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoundVideo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoundVideo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurVersion != other.CurVersion) return false;
      if (InitData != other.InitData) return false;
      if(!videoMessage_.Equals(other.videoMessage_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurVersion != 0) hash ^= CurVersion.GetHashCode();
      if (InitData.Length != 0) hash ^= InitData.GetHashCode();
      hash ^= videoMessage_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurVersion != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurVersion);
      }
      if (InitData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(InitData);
      }
      videoMessage_.WriteTo(output, _repeated_videoMessage_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurVersion);
      }
      if (InitData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(InitData);
      }
      size += videoMessage_.CalculateSize(_repeated_videoMessage_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoundVideo other) {
      if (other == null) {
        return;
      }
      if (other.CurVersion != 0) {
        CurVersion = other.CurVersion;
      }
      if (other.InitData.Length != 0) {
        InitData = other.InitData;
      }
      videoMessage_.Add(other.videoMessage_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurVersion = input.ReadUInt32();
            break;
          }
          case 18: {
            InitData = input.ReadBytes();
            break;
          }
          case 26: {
            videoMessage_.AddEntriesFrom(input, _repeated_videoMessage_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomRecordData : pb::IMessage<RoomRecordData> {
    private static readonly pb::MessageParser<RoomRecordData> _parser = new pb::MessageParser<RoomRecordData>(() => new RoomRecordData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomRecordData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2DBEntity.S2DBReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomRecordData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomRecordData(RoomRecordData other) : this() {
      curVersion_ = other.curVersion_;
      guid_ = other.guid_;
      createGuid_ = other.createGuid_;
      codeId_ = other.codeId_;
      roomType_ = other.roomType_;
      curGameCount_ = other.curGameCount_;
      createTime_ = other.createTime_;
      disposeTime_ = other.disposeTime_;
      roomDisposeType_ = other.roomDisposeType_;
      costMoney_ = other.costMoney_;
      gameCout_ = other.gameCout_;
      createPayType_ = other.createPayType_;
      roomRecordPlayerInfo_ = other.roomRecordPlayerInfo_.Clone();
      roundRecord_ = other.roundRecord_.Clone();
      roundVideo_ = other.roundVideo_.Clone();
      playType_ = other.playType_;
      faWangTp_ = other.faWangTp_;
      wuZhaTp_ = other.wuZhaTp_;
      playCount_ = other.playCount_;
      jiangMa_ = other.jiangMa_.Clone();
      isBaWang_ = other.isBaWang_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomRecordData Clone() {
      return new RoomRecordData(this);
    }

    /// <summary>Field number for the "cur_version" field.</summary>
    public const int CurVersionFieldNumber = 1;
    private uint curVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurVersion {
      get { return curVersion_; }
      set {
        curVersion_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "create_guid" field.</summary>
    public const int CreateGuidFieldNumber = 3;
    private ulong createGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreateGuid {
      get { return createGuid_; }
      set {
        createGuid_ = value;
      }
    }

    /// <summary>Field number for the "code_id" field.</summary>
    public const int CodeIdFieldNumber = 4;
    private uint codeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CodeId {
      get { return codeId_; }
      set {
        codeId_ = value;
      }
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 5;
    private uint roomType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    /// <summary>Field number for the "cur_game_count" field.</summary>
    public const int CurGameCountFieldNumber = 6;
    private uint curGameCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurGameCount {
      get { return curGameCount_; }
      set {
        curGameCount_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 7;
    private uint createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "dispose_time" field.</summary>
    public const int DisposeTimeFieldNumber = 8;
    private uint disposeTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DisposeTime {
      get { return disposeTime_; }
      set {
        disposeTime_ = value;
      }
    }

    /// <summary>Field number for the "room_dispose_type" field.</summary>
    public const int RoomDisposeTypeFieldNumber = 9;
    private uint roomDisposeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomDisposeType {
      get { return roomDisposeType_; }
      set {
        roomDisposeType_ = value;
      }
    }

    /// <summary>Field number for the "cost_money" field.</summary>
    public const int CostMoneyFieldNumber = 10;
    private uint costMoney_;
    /// <summary>
    /// 房间价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CostMoney {
      get { return costMoney_; }
      set {
        costMoney_ = value;
      }
    }

    /// <summary>Field number for the "game_cout" field.</summary>
    public const int GameCoutFieldNumber = 11;
    private uint gameCout_;
    /// <summary>
    /// 房间局数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameCout {
      get { return gameCout_; }
      set {
        gameCout_ = value;
      }
    }

    /// <summary>Field number for the "create_pay_type" field.</summary>
    public const int CreatePayTypeFieldNumber = 12;
    private uint createPayType_;
    /// <summary>
    /// 支付方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreatePayType {
      get { return createPayType_; }
      set {
        createPayType_ = value;
      }
    }

    /// <summary>Field number for the "room_record_player_info" field.</summary>
    public const int RoomRecordPlayerInfoFieldNumber = 13;
    private static readonly pb::FieldCodec<global::S2DBEntity.RoomRecordPlayerInfo> _repeated_roomRecordPlayerInfo_codec
        = pb::FieldCodec.ForMessage(106, global::S2DBEntity.RoomRecordPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::S2DBEntity.RoomRecordPlayerInfo> roomRecordPlayerInfo_ = new pbc::RepeatedField<global::S2DBEntity.RoomRecordPlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::S2DBEntity.RoomRecordPlayerInfo> RoomRecordPlayerInfo {
      get { return roomRecordPlayerInfo_; }
    }

    /// <summary>Field number for the "round_record" field.</summary>
    public const int RoundRecordFieldNumber = 14;
    private static readonly pb::FieldCodec<global::S2DBEntity.RoundRecord> _repeated_roundRecord_codec
        = pb::FieldCodec.ForMessage(114, global::S2DBEntity.RoundRecord.Parser);
    private readonly pbc::RepeatedField<global::S2DBEntity.RoundRecord> roundRecord_ = new pbc::RepeatedField<global::S2DBEntity.RoundRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::S2DBEntity.RoundRecord> RoundRecord {
      get { return roundRecord_; }
    }

    /// <summary>Field number for the "round_video" field.</summary>
    public const int RoundVideoFieldNumber = 15;
    private static readonly pb::FieldCodec<global::S2DBEntity.RoundVideo> _repeated_roundVideo_codec
        = pb::FieldCodec.ForMessage(122, global::S2DBEntity.RoundVideo.Parser);
    private readonly pbc::RepeatedField<global::S2DBEntity.RoundVideo> roundVideo_ = new pbc::RepeatedField<global::S2DBEntity.RoundVideo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::S2DBEntity.RoundVideo> RoundVideo {
      get { return roundVideo_; }
    }

    /// <summary>Field number for the "play_type" field.</summary>
    public const int PlayTypeFieldNumber = 16;
    private uint playType_;
    /// <summary>
    /// 玩法类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    /// <summary>Field number for the "fa_wang_tp" field.</summary>
    public const int FaWangTpFieldNumber = 17;
    private bool faWangTp_;
    /// <summary>
    /// 罚王摊牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FaWangTp {
      get { return faWangTp_; }
      set {
        faWangTp_ = value;
      }
    }

    /// <summary>Field number for the "wu_zha_tp" field.</summary>
    public const int WuZhaTpFieldNumber = 18;
    private bool wuZhaTp_;
    /// <summary>
    /// 无炸摊牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WuZhaTp {
      get { return wuZhaTp_; }
      set {
        wuZhaTp_ = value;
      }
    }

    /// <summary>Field number for the "play_count" field.</summary>
    public const int PlayCountFieldNumber = 19;
    private uint playCount_;
    /// <summary>
    /// 玩的人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayCount {
      get { return playCount_; }
      set {
        playCount_ = value;
      }
    }

    /// <summary>Field number for the "jiang_ma" field.</summary>
    public const int JiangMaFieldNumber = 20;
    private static readonly pb::FieldCodec<uint> _repeated_jiangMa_codec
        = pb::FieldCodec.ForUInt32(162);
    private readonly pbc::RepeatedField<uint> jiangMa_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 奖码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> JiangMa {
      get { return jiangMa_; }
    }

    /// <summary>Field number for the "is_ba_wang" field.</summary>
    public const int IsBaWangFieldNumber = 21;
    private bool isBaWang_;
    /// <summary>
    /// 是否是八王
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBaWang {
      get { return isBaWang_; }
      set {
        isBaWang_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomRecordData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomRecordData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurVersion != other.CurVersion) return false;
      if (Guid != other.Guid) return false;
      if (CreateGuid != other.CreateGuid) return false;
      if (CodeId != other.CodeId) return false;
      if (RoomType != other.RoomType) return false;
      if (CurGameCount != other.CurGameCount) return false;
      if (CreateTime != other.CreateTime) return false;
      if (DisposeTime != other.DisposeTime) return false;
      if (RoomDisposeType != other.RoomDisposeType) return false;
      if (CostMoney != other.CostMoney) return false;
      if (GameCout != other.GameCout) return false;
      if (CreatePayType != other.CreatePayType) return false;
      if(!roomRecordPlayerInfo_.Equals(other.roomRecordPlayerInfo_)) return false;
      if(!roundRecord_.Equals(other.roundRecord_)) return false;
      if(!roundVideo_.Equals(other.roundVideo_)) return false;
      if (PlayType != other.PlayType) return false;
      if (FaWangTp != other.FaWangTp) return false;
      if (WuZhaTp != other.WuZhaTp) return false;
      if (PlayCount != other.PlayCount) return false;
      if(!jiangMa_.Equals(other.jiangMa_)) return false;
      if (IsBaWang != other.IsBaWang) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurVersion != 0) hash ^= CurVersion.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (CreateGuid != 0UL) hash ^= CreateGuid.GetHashCode();
      if (CodeId != 0) hash ^= CodeId.GetHashCode();
      if (RoomType != 0) hash ^= RoomType.GetHashCode();
      if (CurGameCount != 0) hash ^= CurGameCount.GetHashCode();
      if (CreateTime != 0) hash ^= CreateTime.GetHashCode();
      if (DisposeTime != 0) hash ^= DisposeTime.GetHashCode();
      if (RoomDisposeType != 0) hash ^= RoomDisposeType.GetHashCode();
      if (CostMoney != 0) hash ^= CostMoney.GetHashCode();
      if (GameCout != 0) hash ^= GameCout.GetHashCode();
      if (CreatePayType != 0) hash ^= CreatePayType.GetHashCode();
      hash ^= roomRecordPlayerInfo_.GetHashCode();
      hash ^= roundRecord_.GetHashCode();
      hash ^= roundVideo_.GetHashCode();
      if (PlayType != 0) hash ^= PlayType.GetHashCode();
      if (FaWangTp != false) hash ^= FaWangTp.GetHashCode();
      if (WuZhaTp != false) hash ^= WuZhaTp.GetHashCode();
      if (PlayCount != 0) hash ^= PlayCount.GetHashCode();
      hash ^= jiangMa_.GetHashCode();
      if (IsBaWang != false) hash ^= IsBaWang.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurVersion != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurVersion);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (CreateGuid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(CreateGuid);
      }
      if (CodeId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CodeId);
      }
      if (RoomType != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(RoomType);
      }
      if (CurGameCount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(CurGameCount);
      }
      if (CreateTime != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(CreateTime);
      }
      if (DisposeTime != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(DisposeTime);
      }
      if (RoomDisposeType != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(RoomDisposeType);
      }
      if (CostMoney != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(CostMoney);
      }
      if (GameCout != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(GameCout);
      }
      if (CreatePayType != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(CreatePayType);
      }
      roomRecordPlayerInfo_.WriteTo(output, _repeated_roomRecordPlayerInfo_codec);
      roundRecord_.WriteTo(output, _repeated_roundRecord_codec);
      roundVideo_.WriteTo(output, _repeated_roundVideo_codec);
      if (PlayType != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(PlayType);
      }
      if (FaWangTp != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(FaWangTp);
      }
      if (WuZhaTp != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(WuZhaTp);
      }
      if (PlayCount != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(PlayCount);
      }
      jiangMa_.WriteTo(output, _repeated_jiangMa_codec);
      if (IsBaWang != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsBaWang);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurVersion);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (CreateGuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreateGuid);
      }
      if (CodeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CodeId);
      }
      if (RoomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomType);
      }
      if (CurGameCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurGameCount);
      }
      if (CreateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateTime);
      }
      if (DisposeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DisposeTime);
      }
      if (RoomDisposeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomDisposeType);
      }
      if (CostMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CostMoney);
      }
      if (GameCout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameCout);
      }
      if (CreatePayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreatePayType);
      }
      size += roomRecordPlayerInfo_.CalculateSize(_repeated_roomRecordPlayerInfo_codec);
      size += roundRecord_.CalculateSize(_repeated_roundRecord_codec);
      size += roundVideo_.CalculateSize(_repeated_roundVideo_codec);
      if (PlayType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PlayType);
      }
      if (FaWangTp != false) {
        size += 2 + 1;
      }
      if (WuZhaTp != false) {
        size += 2 + 1;
      }
      if (PlayCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PlayCount);
      }
      size += jiangMa_.CalculateSize(_repeated_jiangMa_codec);
      if (IsBaWang != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomRecordData other) {
      if (other == null) {
        return;
      }
      if (other.CurVersion != 0) {
        CurVersion = other.CurVersion;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.CreateGuid != 0UL) {
        CreateGuid = other.CreateGuid;
      }
      if (other.CodeId != 0) {
        CodeId = other.CodeId;
      }
      if (other.RoomType != 0) {
        RoomType = other.RoomType;
      }
      if (other.CurGameCount != 0) {
        CurGameCount = other.CurGameCount;
      }
      if (other.CreateTime != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.DisposeTime != 0) {
        DisposeTime = other.DisposeTime;
      }
      if (other.RoomDisposeType != 0) {
        RoomDisposeType = other.RoomDisposeType;
      }
      if (other.CostMoney != 0) {
        CostMoney = other.CostMoney;
      }
      if (other.GameCout != 0) {
        GameCout = other.GameCout;
      }
      if (other.CreatePayType != 0) {
        CreatePayType = other.CreatePayType;
      }
      roomRecordPlayerInfo_.Add(other.roomRecordPlayerInfo_);
      roundRecord_.Add(other.roundRecord_);
      roundVideo_.Add(other.roundVideo_);
      if (other.PlayType != 0) {
        PlayType = other.PlayType;
      }
      if (other.FaWangTp != false) {
        FaWangTp = other.FaWangTp;
      }
      if (other.WuZhaTp != false) {
        WuZhaTp = other.WuZhaTp;
      }
      if (other.PlayCount != 0) {
        PlayCount = other.PlayCount;
      }
      jiangMa_.Add(other.jiangMa_);
      if (other.IsBaWang != false) {
        IsBaWang = other.IsBaWang;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurVersion = input.ReadUInt32();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 24: {
            CreateGuid = input.ReadUInt64();
            break;
          }
          case 32: {
            CodeId = input.ReadUInt32();
            break;
          }
          case 40: {
            RoomType = input.ReadUInt32();
            break;
          }
          case 48: {
            CurGameCount = input.ReadUInt32();
            break;
          }
          case 56: {
            CreateTime = input.ReadUInt32();
            break;
          }
          case 64: {
            DisposeTime = input.ReadUInt32();
            break;
          }
          case 72: {
            RoomDisposeType = input.ReadUInt32();
            break;
          }
          case 80: {
            CostMoney = input.ReadUInt32();
            break;
          }
          case 88: {
            GameCout = input.ReadUInt32();
            break;
          }
          case 96: {
            CreatePayType = input.ReadUInt32();
            break;
          }
          case 106: {
            roomRecordPlayerInfo_.AddEntriesFrom(input, _repeated_roomRecordPlayerInfo_codec);
            break;
          }
          case 114: {
            roundRecord_.AddEntriesFrom(input, _repeated_roundRecord_codec);
            break;
          }
          case 122: {
            roundVideo_.AddEntriesFrom(input, _repeated_roundVideo_codec);
            break;
          }
          case 128: {
            PlayType = input.ReadUInt32();
            break;
          }
          case 136: {
            FaWangTp = input.ReadBool();
            break;
          }
          case 144: {
            WuZhaTp = input.ReadBool();
            break;
          }
          case 152: {
            PlayCount = input.ReadUInt32();
            break;
          }
          case 162:
          case 160: {
            jiangMa_.AddEntriesFrom(input, _repeated_jiangMa_codec);
            break;
          }
          case 168: {
            IsBaWang = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomRecordInfo : pb::IMessage<RoomRecordInfo> {
    private static readonly pb::MessageParser<RoomRecordInfo> _parser = new pb::MessageParser<RoomRecordInfo>(() => new RoomRecordInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomRecordInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2DBEntity.S2DBReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomRecordInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomRecordInfo(RoomRecordInfo other) : this() {
      guid_ = other.guid_;
      roomCodeId_ = other.roomCodeId_;
      roomType_ = other.roomType_;
      creatorGuid_ = other.creatorGuid_;
      createTime_ = other.createTime_;
      disposeTime_ = other.disposeTime_;
      RoomRecordData = other.roomRecordData_ != null ? other.RoomRecordData.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomRecordInfo Clone() {
      return new RoomRecordInfo(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "room_code_id" field.</summary>
    public const int RoomCodeIdFieldNumber = 2;
    private uint roomCodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomCodeId {
      get { return roomCodeId_; }
      set {
        roomCodeId_ = value;
      }
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 3;
    private uint roomType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    /// <summary>Field number for the "creator_guid" field.</summary>
    public const int CreatorGuidFieldNumber = 4;
    private ulong creatorGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreatorGuid {
      get { return creatorGuid_; }
      set {
        creatorGuid_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 5;
    private uint createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "dispose_time" field.</summary>
    public const int DisposeTimeFieldNumber = 6;
    private uint disposeTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DisposeTime {
      get { return disposeTime_; }
      set {
        disposeTime_ = value;
      }
    }

    /// <summary>Field number for the "room_record_data" field.</summary>
    public const int RoomRecordDataFieldNumber = 7;
    private global::S2DBEntity.RoomRecordData roomRecordData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2DBEntity.RoomRecordData RoomRecordData {
      get { return roomRecordData_; }
      set {
        roomRecordData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomRecordInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomRecordInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (RoomCodeId != other.RoomCodeId) return false;
      if (RoomType != other.RoomType) return false;
      if (CreatorGuid != other.CreatorGuid) return false;
      if (CreateTime != other.CreateTime) return false;
      if (DisposeTime != other.DisposeTime) return false;
      if (!object.Equals(RoomRecordData, other.RoomRecordData)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (RoomCodeId != 0) hash ^= RoomCodeId.GetHashCode();
      if (RoomType != 0) hash ^= RoomType.GetHashCode();
      if (CreatorGuid != 0UL) hash ^= CreatorGuid.GetHashCode();
      if (CreateTime != 0) hash ^= CreateTime.GetHashCode();
      if (DisposeTime != 0) hash ^= DisposeTime.GetHashCode();
      if (roomRecordData_ != null) hash ^= RoomRecordData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (RoomCodeId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoomCodeId);
      }
      if (RoomType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RoomType);
      }
      if (CreatorGuid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(CreatorGuid);
      }
      if (CreateTime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CreateTime);
      }
      if (DisposeTime != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(DisposeTime);
      }
      if (roomRecordData_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RoomRecordData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (RoomCodeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomCodeId);
      }
      if (RoomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomType);
      }
      if (CreatorGuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreatorGuid);
      }
      if (CreateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateTime);
      }
      if (DisposeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DisposeTime);
      }
      if (roomRecordData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomRecordData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomRecordInfo other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.RoomCodeId != 0) {
        RoomCodeId = other.RoomCodeId;
      }
      if (other.RoomType != 0) {
        RoomType = other.RoomType;
      }
      if (other.CreatorGuid != 0UL) {
        CreatorGuid = other.CreatorGuid;
      }
      if (other.CreateTime != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.DisposeTime != 0) {
        DisposeTime = other.DisposeTime;
      }
      if (other.roomRecordData_ != null) {
        if (roomRecordData_ == null) {
          roomRecordData_ = new global::S2DBEntity.RoomRecordData();
        }
        RoomRecordData.MergeFrom(other.RoomRecordData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 16: {
            RoomCodeId = input.ReadUInt32();
            break;
          }
          case 24: {
            RoomType = input.ReadUInt32();
            break;
          }
          case 32: {
            CreatorGuid = input.ReadUInt64();
            break;
          }
          case 40: {
            CreateTime = input.ReadUInt32();
            break;
          }
          case 48: {
            DisposeTime = input.ReadUInt32();
            break;
          }
          case 58: {
            if (roomRecordData_ == null) {
              roomRecordData_ = new global::S2DBEntity.RoomRecordData();
            }
            input.ReadMessage(roomRecordData_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryRoomRecordInfo : pb::IMessage<QueryRoomRecordInfo> {
    private static readonly pb::MessageParser<QueryRoomRecordInfo> _parser = new pb::MessageParser<QueryRoomRecordInfo>(() => new QueryRoomRecordInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryRoomRecordInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2DBEntity.S2DBReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoomRecordInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoomRecordInfo(QueryRoomRecordInfo other) : this() {
      guid_ = other.guid_;
      RoomRecordInfo = other.roomRecordInfo_ != null ? other.RoomRecordInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoomRecordInfo Clone() {
      return new QueryRoomRecordInfo(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "room_record_info" field.</summary>
    public const int RoomRecordInfoFieldNumber = 2;
    private global::S2DBEntity.RoomRecordInfo roomRecordInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2DBEntity.RoomRecordInfo RoomRecordInfo {
      get { return roomRecordInfo_; }
      set {
        roomRecordInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryRoomRecordInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryRoomRecordInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (!object.Equals(RoomRecordInfo, other.RoomRecordInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (roomRecordInfo_ != null) hash ^= RoomRecordInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (roomRecordInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoomRecordInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (roomRecordInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomRecordInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryRoomRecordInfo other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.roomRecordInfo_ != null) {
        if (roomRecordInfo_ == null) {
          roomRecordInfo_ = new global::S2DBEntity.RoomRecordInfo();
        }
        RoomRecordInfo.MergeFrom(other.RoomRecordInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 18: {
            if (roomRecordInfo_ == null) {
              roomRecordInfo_ = new global::S2DBEntity.RoomRecordInfo();
            }
            input.ReadMessage(roomRecordInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoadCharacter : pb::IMessage<LoadCharacter> {
    private static readonly pb::MessageParser<LoadCharacter> _parser = new pb::MessageParser<LoadCharacter>(() => new LoadCharacter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadCharacter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::S2DBEntity.S2DBReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadCharacter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadCharacter(LoadCharacter other) : this() {
      type_ = other.type_;
      guid_ = other.guid_;
      name_ = other.name_;
      code_ = other.code_;
      Character = other.character_ != null ? other.Character.Clone() : null;
      changeGold_ = other.changeGold_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadCharacter Clone() {
      return new LoadCharacter(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 4;
    private uint code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 5;
    private global::S2DBEntity.Characters character_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::S2DBEntity.Characters Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    /// <summary>Field number for the "change_gold" field.</summary>
    public const int ChangeGoldFieldNumber = 6;
    private int changeGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeGold {
      get { return changeGold_; }
      set {
        changeGold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadCharacter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadCharacter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Guid != other.Guid) return false;
      if (Name != other.Name) return false;
      if (Code != other.Code) return false;
      if (!object.Equals(Character, other.Character)) return false;
      if (ChangeGold != other.ChangeGold) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (character_ != null) hash ^= Character.GetHashCode();
      if (ChangeGold != 0) hash ^= ChangeGold.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Guid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Code != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Code);
      }
      if (character_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Character);
      }
      if (ChangeGold != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ChangeGold);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
      }
      if (character_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Character);
      }
      if (ChangeGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeGold);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadCharacter other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.character_ != null) {
        if (character_ == null) {
          character_ = new global::S2DBEntity.Characters();
        }
        Character.MergeFrom(other.Character);
      }
      if (other.ChangeGold != 0) {
        ChangeGold = other.ChangeGold;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            Guid = input.ReadUInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Code = input.ReadUInt32();
            break;
          }
          case 42: {
            if (character_ == null) {
              character_ = new global::S2DBEntity.Characters();
            }
            input.ReadMessage(character_);
            break;
          }
          case 48: {
            ChangeGold = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
